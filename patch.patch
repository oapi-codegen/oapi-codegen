diff --git a/pkg/codegen/templates/strict/strict-gin.tmpl b/pkg/codegen/templates/strict/strict-gin.tmpl
index d4c4316..6c08f81 100644
--- a/pkg/codegen/templates/strict/strict-gin.tmpl
+++ b/pkg/codegen/templates/strict/strict-gin.tmpl
@@ -34,19 +34,30 @@ type strictHandler struct {
                 {{if .IsJSON }}
                     var body {{$opid}}{{.NameTag}}RequestBody
                     if err := ctx.ShouldBindJSON(&body); err != nil {
-                        ctx.Status(http.StatusBadRequest)
-                        ctx.Error(err)
+                        // Moment note: this is hacky because we assume externalRef0 is pointing to
+                        // the apierr package. This is likely OK, but if compilation fails here, then
+                        // the order of import-mappings must have apierr first.
+                        ctx.JSON(http.StatusBadRequest, externalRef0.APIError{
+                            Error: err.Error(),
+                            ErrorType: externalRef0.ErrorTypeInvalidRequest,
+                        })
                         return
                     }
                     request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                 {{else if eq .NameTag "Formdata" -}}
                     if err := ctx.Request.ParseForm(); err != nil {
-                        ctx.Error(err)
+                        ctx.JSON(http.StatusBadRequest, externalRef0.APIError{
+                            Error: err.Error(),
+                            ErrorType: externalRef0.ErrorTypeInvalidRequest,
+                        })
                         return
                     }
                     var body {{$opid}}{{.NameTag}}RequestBody
                     if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
-                        ctx.Error(err)
+                        ctx.JSON(http.StatusBadRequest, externalRef0.APIError{
+                            Error: err.Error(),
+                            ErrorType: externalRef0.ErrorTypeInvalidRequest,
+                        })
                         return
                     }
                     request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
@@ -55,15 +66,24 @@ type strictHandler struct {
                     if reader, err := ctx.Request.MultipartReader(); err == nil {
                         request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = reader
                     } else {
-                        ctx.Error(err)
+                        ctx.JSON(http.StatusBadRequest, externalRef0.APIError{
+                            Error: err.Error(),
+                            ErrorType: externalRef0.ErrorTypeInvalidRequest,
+                        })
                         return
                     }
                     {{else -}}
                     if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
-                        ctx.Error(err)
+                        ctx.JSON(http.StatusBadRequest, externalRef0.APIError{
+                            Error: err.Error(),
+                            ErrorType: externalRef0.ErrorTypeInvalidRequest,
+                        })
                         return
                     } else if boundary := params["boundary"]; boundary == "" {
-                        ctx.Error(http.ErrMissingBoundary)
+                        ctx.JSON(http.StatusBadRequest, externalRef0.APIError{
+                            Error: http.ErrMissingBoundary.Error(),
+                            ErrorType: externalRef0.ErrorTypeInvalidRequest,
+                        })
                         return
                     } else {
                         request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = multipart.NewReader(ctx.Request.Body, boundary)
@@ -72,7 +92,10 @@ type strictHandler struct {
                 {{else if eq .NameTag "Text" -}}
                     data, err := io.ReadAll(ctx.Request.Body)
                     if err != nil {
-                        ctx.Error(err)
+                        ctx.JSON(http.StatusBadRequest, externalRef0.APIError{
+                            Error: err.Error(),
+                            ErrorType: externalRef0.ErrorTypeInvalidRequest,
+                        })
                         return
                     }
                     body := {{$opid}}{{.NameTag}}RequestBody(data)
