type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
    return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
    ssi StrictServerInterface
    middlewares []StrictMiddlewareFunc
}

{{range .}}
    {{$opid := .OperationId}}
    // {{$opid}} operation middleware
    func (sh *strictHandler) {{.OperationId}}(ctx *fiber.Ctx{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{.OperationId}}Params{{end}}) error {
        var request {{$opid | ucFirst}}RequestObject

        {{range .PathParams -}}
            {{$varName := .GoVariableName -}}
            request.{{.GoName}} = {{.GoVariableName}}
        {{end -}}

        {{if .RequiresParamObject -}}
            request.Params = params
        {{end -}}

        {{ if .HasMaskedRequestContentTypes -}}
            request.ContentType = string(ctx.Request().Header.ContentType())
        {{end -}}

        {{$multipleBodies := gt (len .Bodies) 1 -}}
        {{range .Bodies -}}
            {{if $multipleBodies}}if strings.HasPrefix(string(ctx.Request().Header.ContentType()), "{{.ContentType}}") { {{end}}
                {{if .IsJSON }}
                    var body {{$opid}}{{.NameTag}}RequestBody
                    if err := ctx.BodyParser(&body); err != nil {
                        return fiber.NewError(fiber.StatusBadRequest, err.Error())
                    }
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else if eq .NameTag "Formdata" -}}
                    var body {{$opid}}{{.NameTag}}RequestBody
                    if err := ctx.BodyParser(&body); err != nil {
                        return fiber.NewError(fiber.StatusBadRequest, err.Error())
                    }
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else if eq .NameTag "Multipart" -}}
                    {{if eq .ContentType "multipart/form-data" -}}
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = multipart.NewReader(bytes.NewReader(ctx.Request().Body()), string(ctx.Request().Header.MultipartFormBoundary()))
                    {{else -}}
                    if _, params, err := mime.ParseMediaType(string(ctx.Request().Header.ContentType())); err != nil {
                        return fiber.NewError(fiber.StatusBadRequest, err.Error())
                    } else if boundary := params["boundary"]; boundary == "" {
                        return fiber.NewError(fiber.StatusBadRequest, http.ErrMissingBoundary.Error())
                    } else {
                        request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = multipart.NewReader(bytes.NewReader(ctx.Request().Body()), boundary)
                    }
                    {{end -}}
                {{else if eq .NameTag "Text" -}}
                    data := ctx.Request().Body()
                    body := {{$opid}}{{.NameTag}}RequestBody(data)
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else -}}
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = bytes.NewReader(ctx.Request().Body())
                {{end}}{{/* if eq .NameTag "JSON" */ -}}
            {{if $multipleBodies}}}{{end}}
        {{end}}{{/* range .Bodies */}}

        handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
            return sh.ssi.{{.OperationId}}(ctx.UserContext(), request.({{$opid | ucFirst}}RequestObject))
        }
        for _, middleware := range sh.middlewares {
            handler = middleware(handler, "{{.OperationId}}")
        }

        response, err := handler(ctx, request)

        if err != nil {
            return fiber.NewError(fiber.StatusBadRequest, err.Error())
        } else if validResponse, ok := response.({{$opid | ucFirst}}ResponseObject); ok {
            if err := validResponse.Visit{{$opid}}Response(ctx); err != nil {
                return fiber.NewError(fiber.StatusBadRequest, err.Error())
            }
        } else if response != nil {
            return fmt.Errorf("unexpected response type: %T", response)
        }
        return nil
    }
{{end}}
