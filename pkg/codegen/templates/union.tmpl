{{range .Types}}
    {{$typeName := .TypeName -}}
    {{$discriminator := .Schema.Discriminator}}
    {{$properties := .Schema.Properties -}}
    {{range .Schema.UnionElements}}
        {{$element := . -}}
        // As{{ .Method }} returns the union data inside the {{$typeName}} as a {{.}}
        func (t {{$typeName}}) As{{ .Method }}() ({{.}}, error) {
            var body {{.}}
            err := json.Unmarshal(t.union, &body)
            return body, err
        }

        func (t *{{$typeName}}) prepare{{ .Method }}(v {{.}}) ([]byte, error) {
            {{if $discriminator -}}
                {{$setProperty := false -}}
                {{$tHasProperty := false -}}
                {{$tPropertyType := "" -}}
                {{$vHasProperty := false -}}
                {{$typeMatches := 0 -}}
                {{$discValue := "" -}}
                {{range $value, $type := $discriminator.Mapping -}}
                    {{if eq $type $element.GoType -}}
                        {{$typeMatches = add $typeMatches 1 -}}
                        {{$discValue = $value -}}
                        {{$vHasProperty = $element.HasDiscriminatorProperty -}}
                        {{range $properties -}}
                            {{if eq .GoFieldName $discriminator.PropertyName -}}
                                {{$tHasProperty = true -}}
                                {{$tPropertyType = .GoTypeDef -}}
                                {{break -}}
                            {{end -}}
                        {{end -}}
                    {{end -}}
                {{end -}}
                {{if le $typeMatches 1 -}}
                    {{if $tHasProperty -}}
                        {{if hasPrefix $tPropertyType "*" -}}
                            discValue := "{{$discValue}}"
                            t.{{$discriminator.PropertyName}} = ({{$tPropertyType}})(&discValue)
                        {{else if hasPrefix $tPropertyType "nullable." -}}
                            t.{{$discriminator.PropertyName}} = nullable.NewNullableWithValue("{{$discValue}}")
                        {{else -}}
                            t.{{$discriminator.PropertyName}} = "{{$discValue}}"
                        {{end -}}
                    {{end -}}
                    {{if $vHasProperty -}}
                        v.{{$discriminator.PropertyName}} = "{{$discValue}}"
                    {{end -}}
                {{else -}}
                    {{if and $vHasProperty $tHasProperty -}}
                        t.{{$discriminator.PropertyName}} = ({{$tPropertyType}})(string(v.{{$discriminator.PropertyName}}))
                    {{end -}}
                {{end -}}
            {{end -}}
            return json.Marshal(v)
        }

        // From{{ .Method }} overwrites any union data inside the {{$typeName}} as the provided {{.}}
        func (t *{{$typeName}}) From{{ .Method }} (v {{.}}) error {
            b, err := t.prepare{{ .Method }}(v)
            t.union = b
            return err
        }

        // Merge{{ .Method }} performs a merge with any union data inside the {{$typeName}}, using the provided {{.}}
        func (t *{{$typeName}}) Merge{{ .Method }} (v {{.}}) error {
            b, err := t.prepare{{ .Method }}(v)
            if err != nil {
              return err
            }

            merged, err := runtime.JSONMerge(t.union, b)
            t.union = merged
            return err
        }
    {{end}}

    {{if $discriminator}}
        func (t {{.TypeName}}) Discriminator() (string, error) {
            var discriminator struct {
                Discriminator string {{$discriminator.JSONTag}}
            }
            err := json.Unmarshal(t.union, &discriminator)
            return discriminator.Discriminator, err
        }

        {{if ne 0 (len $discriminator.Mapping)}}
            func (t {{.TypeName}}) ValueByDiscriminator() (interface{}, error) {
                discriminator, err := t.Discriminator()
                if err != nil {
                    return nil, err
                }
                switch discriminator{
                    {{range $value, $type := $discriminator.Mapping -}}
                        case "{{$value}}":
                            return t.As{{$type}}()
                    {{end -}}
                    default:
                        return nil, errors.New("unknown discriminator value: "+discriminator)
                }
            }
        {{end}}
    {{end}}

    {{if not .Schema.HasAdditionalProperties}}

    func (t {{.TypeName}}) MarshalJSON() ([]byte, error) {
        b, err := t.union.MarshalJSON()
        {{if ne 0 (len .Schema.Properties) -}}
            if err != nil {
                return nil, err
            }
            object := make(map[string]json.RawMessage)
            if t.union != nil {
              err = json.Unmarshal(b, &object)
              if err != nil {
                return nil, err
              }
            }
            {{range .Schema.Properties}}
            {{if .HasOptionalPointer}}if t.{{.GoFieldName}} != nil { {{end}}
                object["{{.JsonFieldName}}"], err = json.Marshal(t.{{.GoFieldName}})
                if err != nil {
                    return nil, fmt.Errorf("error marshaling '{{.JsonFieldName}}': %w", err)
                }
            {{if .HasOptionalPointer}} }{{end}}
            {{end -}}
            b, err = json.Marshal(object)
        {{end -}}
        return b, err
    }

    func (t *{{.TypeName}}) UnmarshalJSON(b []byte) error {
        err := t.union.UnmarshalJSON(b)
        {{if ne 0 (len .Schema.Properties) -}}
            if err != nil {
                return err
            }
            object := make(map[string]json.RawMessage)
            err = json.Unmarshal(b, &object)
            if err != nil {
                return err
            }
            {{range .Schema.Properties}}
                if raw, found := object["{{.JsonFieldName}}"]; found {
                    err = json.Unmarshal(raw, &t.{{.GoFieldName}})
                    if err != nil {
                        return fmt.Errorf("error reading '{{.JsonFieldName}}': %w", err)
                    }
                }
            {{end}}
        {{end -}}
        return err
    }
    {{end}}
{{end}}
