// Package pkg1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package pkg1

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"mime"
	"mime/multipart"
	"net/http"
	"net/url"
	"strings"

	"github.com/kataras/iris/v12"
	"github.com/oapi-codegen/runtime"
	strictiris "github.com/oapi-codegen/runtime/strictmiddleware/iris"
)

// TestSchema defines model for TestSchema.
type TestSchema struct {
	Field1 string `json:"field1"`
	Field2 int    `json:"field2"`
}

// TestRespRefFixedJSON defines model for testRespRefFixedJSON.
type TestRespRefFixedJSON = TestSchema

// TestRespRefFixedSpecialJSON defines model for testRespRefFixedSpecialJSON.
type TestRespRefFixedSpecialJSON = TestSchema

// TestRespRefHeaderFixedJSON defines model for testRespRefHeaderFixedJSON.
type TestRespRefHeaderFixedJSON = TestSchema

// TestRespRefHeaderFixedSpecialJSON defines model for testRespRefHeaderFixedSpecialJSON.
type TestRespRefHeaderFixedSpecialJSON = TestSchema

// TestRespRefHeaderJSON defines model for testRespRefHeaderJSON.
type TestRespRefHeaderJSON = TestSchema

// TestRespRefHeaderSpecialJSON defines model for testRespRefHeaderSpecialJSON.
type TestRespRefHeaderSpecialJSON = TestSchema

// TestRespRefJSON defines model for testRespRefJSON.
type TestRespRefJSON = TestSchema

// TestRespRefSpecialJSON defines model for testRespRefSpecialJSON.
type TestRespRefSpecialJSON = TestSchema

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// TestFixedFormdata request
	TestFixedFormdata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestFixedJSON request
	TestFixedJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestFixedMultipart request
	TestFixedMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestFixedMultipartRelated request
	TestFixedMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestFixedNoContent request
	TestFixedNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestFixedOther request
	TestFixedOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestFixedSpecialJSON request
	TestFixedSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestFixedWildcard request
	TestFixedWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestFormdata request
	TestFormdata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderFixedFormdata request
	TestHeaderFixedFormdata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderFixedJSON request
	TestHeaderFixedJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderFixedMultipart request
	TestHeaderFixedMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderFixedMultipartRelated request
	TestHeaderFixedMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderFixedOther request
	TestHeaderFixedOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderFixedSpecialJSON request
	TestHeaderFixedSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderFixedWildcard request
	TestHeaderFixedWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderFormdata request
	TestHeaderFormdata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderJSON request
	TestHeaderJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderMultipart request
	TestHeaderMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderMultipartRelated request
	TestHeaderMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderOther request
	TestHeaderOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderSpecialJSON request
	TestHeaderSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderWildcard request
	TestHeaderWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestJSON request
	TestJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestMultipart request
	TestMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestMultipartRelated request
	TestMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestNoContent request
	TestNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestOther request
	TestOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefFixedJSON request
	TestRefFixedJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefFixedMultipart request
	TestRefFixedMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefFixedMultipartRelated request
	TestRefFixedMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefFixedNoContent request
	TestRefFixedNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefFixedOther request
	TestRefFixedOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefFixedSpecialJSON request
	TestRefFixedSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefFixedWildcard request
	TestRefFixedWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderFixedJSON request
	TestRefHeaderFixedJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderFixedMultipart request
	TestRefHeaderFixedMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderFixedMultipartRelated request
	TestRefHeaderFixedMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderFixedOther request
	TestRefHeaderFixedOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderFixedSpecialJSON request
	TestRefHeaderFixedSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderFixedWildcard request
	TestRefHeaderFixedWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderJSON request
	TestRefHeaderJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderMultipart request
	TestRefHeaderMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderMultipartRelated request
	TestRefHeaderMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderOther request
	TestRefHeaderOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderSpecialJSON request
	TestRefHeaderSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderWildcard request
	TestRefHeaderWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefJSON request
	TestRefJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefMultipart request
	TestRefMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefMultipartRelated request
	TestRefMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefNoContent request
	TestRefNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefOther request
	TestRefOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefSpecialJSON request
	TestRefSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefWildcard request
	TestRefWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestSpecialJSON request
	TestSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestWildcard request
	TestWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) TestFixedFormdata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestFixedFormdataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestFixedJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestFixedJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestFixedMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestFixedMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestFixedMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestFixedMultipartRelatedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestFixedNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestFixedNoContentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestFixedOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestFixedOtherRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestFixedSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestFixedSpecialJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestFixedWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestFixedWildcardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestFormdata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestFormdataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderFixedFormdata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderFixedFormdataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderFixedJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderFixedJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderFixedMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderFixedMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderFixedMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderFixedMultipartRelatedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderFixedOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderFixedOtherRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderFixedSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderFixedSpecialJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderFixedWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderFixedWildcardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderFormdata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderFormdataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderMultipartRelatedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderOtherRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderSpecialJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderWildcardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestMultipartRelatedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestNoContentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestOtherRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefFixedJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefFixedJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefFixedMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefFixedMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefFixedMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefFixedMultipartRelatedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefFixedNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefFixedNoContentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefFixedOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefFixedOtherRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefFixedSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefFixedSpecialJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefFixedWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefFixedWildcardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderFixedJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderFixedJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderFixedMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderFixedMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderFixedMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderFixedMultipartRelatedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderFixedOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderFixedOtherRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderFixedSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderFixedSpecialJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderFixedWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderFixedWildcardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderMultipartRelatedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderOtherRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderSpecialJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderWildcardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefMultipartRelated(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefMultipartRelatedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefNoContentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefOther(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefOtherRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefSpecialJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefWildcardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestSpecialJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestSpecialJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestWildcard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestWildcardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewTestFixedFormdataRequest generates requests for TestFixedFormdata
func NewTestFixedFormdataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-fixed-formdata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestFixedJSONRequest generates requests for TestFixedJSON
func NewTestFixedJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-fixed-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestFixedMultipartRequest generates requests for TestFixedMultipart
func NewTestFixedMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-fixed-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestFixedMultipartRelatedRequest generates requests for TestFixedMultipartRelated
func NewTestFixedMultipartRelatedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-fixed-multipart-related")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestFixedNoContentRequest generates requests for TestFixedNoContent
func NewTestFixedNoContentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-fixed-nocontent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestFixedOtherRequest generates requests for TestFixedOther
func NewTestFixedOtherRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-fixed-other")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestFixedSpecialJSONRequest generates requests for TestFixedSpecialJSON
func NewTestFixedSpecialJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-fixed-special-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestFixedWildcardRequest generates requests for TestFixedWildcard
func NewTestFixedWildcardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-fixed-wildcard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestFormdataRequest generates requests for TestFormdata
func NewTestFormdataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-formdata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderFixedFormdataRequest generates requests for TestHeaderFixedFormdata
func NewTestHeaderFixedFormdataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-fixed-formdata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderFixedJSONRequest generates requests for TestHeaderFixedJSON
func NewTestHeaderFixedJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-fixed-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderFixedMultipartRequest generates requests for TestHeaderFixedMultipart
func NewTestHeaderFixedMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-fixed-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderFixedMultipartRelatedRequest generates requests for TestHeaderFixedMultipartRelated
func NewTestHeaderFixedMultipartRelatedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-fixed-multipart-related")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderFixedOtherRequest generates requests for TestHeaderFixedOther
func NewTestHeaderFixedOtherRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-fixed-other")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderFixedSpecialJSONRequest generates requests for TestHeaderFixedSpecialJSON
func NewTestHeaderFixedSpecialJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-fixed-special-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderFixedWildcardRequest generates requests for TestHeaderFixedWildcard
func NewTestHeaderFixedWildcardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-fixed-wildcard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderFormdataRequest generates requests for TestHeaderFormdata
func NewTestHeaderFormdataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-formdata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderJSONRequest generates requests for TestHeaderJSON
func NewTestHeaderJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderMultipartRequest generates requests for TestHeaderMultipart
func NewTestHeaderMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderMultipartRelatedRequest generates requests for TestHeaderMultipartRelated
func NewTestHeaderMultipartRelatedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-multipart-related")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderOtherRequest generates requests for TestHeaderOther
func NewTestHeaderOtherRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-other")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderSpecialJSONRequest generates requests for TestHeaderSpecialJSON
func NewTestHeaderSpecialJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-special-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderWildcardRequest generates requests for TestHeaderWildcard
func NewTestHeaderWildcardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-wildcard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestJSONRequest generates requests for TestJSON
func NewTestJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestMultipartRequest generates requests for TestMultipart
func NewTestMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestMultipartRelatedRequest generates requests for TestMultipartRelated
func NewTestMultipartRelatedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-multipart-related")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestNoContentRequest generates requests for TestNoContent
func NewTestNoContentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-nocontent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestOtherRequest generates requests for TestOther
func NewTestOtherRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-other")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefFixedJSONRequest generates requests for TestRefFixedJSON
func NewTestRefFixedJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-fixed-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefFixedMultipartRequest generates requests for TestRefFixedMultipart
func NewTestRefFixedMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-fixed-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefFixedMultipartRelatedRequest generates requests for TestRefFixedMultipartRelated
func NewTestRefFixedMultipartRelatedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-fixed-multipart-related")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefFixedNoContentRequest generates requests for TestRefFixedNoContent
func NewTestRefFixedNoContentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-fixed-nocontent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefFixedOtherRequest generates requests for TestRefFixedOther
func NewTestRefFixedOtherRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-fixed-other")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefFixedSpecialJSONRequest generates requests for TestRefFixedSpecialJSON
func NewTestRefFixedSpecialJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-fixed-special-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefFixedWildcardRequest generates requests for TestRefFixedWildcard
func NewTestRefFixedWildcardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-fixed-wildcard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderFixedJSONRequest generates requests for TestRefHeaderFixedJSON
func NewTestRefHeaderFixedJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-fixed-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderFixedMultipartRequest generates requests for TestRefHeaderFixedMultipart
func NewTestRefHeaderFixedMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-fixed-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderFixedMultipartRelatedRequest generates requests for TestRefHeaderFixedMultipartRelated
func NewTestRefHeaderFixedMultipartRelatedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-fixed-multipart-related")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderFixedOtherRequest generates requests for TestRefHeaderFixedOther
func NewTestRefHeaderFixedOtherRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-fixed-other")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderFixedSpecialJSONRequest generates requests for TestRefHeaderFixedSpecialJSON
func NewTestRefHeaderFixedSpecialJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-fixed-special-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderFixedWildcardRequest generates requests for TestRefHeaderFixedWildcard
func NewTestRefHeaderFixedWildcardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-fixed-wildcard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderJSONRequest generates requests for TestRefHeaderJSON
func NewTestRefHeaderJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderMultipartRequest generates requests for TestRefHeaderMultipart
func NewTestRefHeaderMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderMultipartRelatedRequest generates requests for TestRefHeaderMultipartRelated
func NewTestRefHeaderMultipartRelatedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-multipart-related")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderOtherRequest generates requests for TestRefHeaderOther
func NewTestRefHeaderOtherRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-other")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderSpecialJSONRequest generates requests for TestRefHeaderSpecialJSON
func NewTestRefHeaderSpecialJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-special-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderWildcardRequest generates requests for TestRefHeaderWildcard
func NewTestRefHeaderWildcardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-wildcard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefJSONRequest generates requests for TestRefJSON
func NewTestRefJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefMultipartRequest generates requests for TestRefMultipart
func NewTestRefMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefMultipartRelatedRequest generates requests for TestRefMultipartRelated
func NewTestRefMultipartRelatedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-multipart-related")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefNoContentRequest generates requests for TestRefNoContent
func NewTestRefNoContentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-nocontent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefOtherRequest generates requests for TestRefOther
func NewTestRefOtherRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-other")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefSpecialJSONRequest generates requests for TestRefSpecialJSON
func NewTestRefSpecialJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-special-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefWildcardRequest generates requests for TestRefWildcard
func NewTestRefWildcardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-wildcard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestSpecialJSONRequest generates requests for TestSpecialJSON
func NewTestSpecialJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-special-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestWildcardRequest generates requests for TestWildcard
func NewTestWildcardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-wildcard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// TestFixedFormdataWithResponse request
	TestFixedFormdataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedFormdataResponse, error)

	// TestFixedJSONWithResponse request
	TestFixedJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedJSONResponse, error)

	// TestFixedMultipartWithResponse request
	TestFixedMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedMultipartResponse, error)

	// TestFixedMultipartRelatedWithResponse request
	TestFixedMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedMultipartRelatedResponse, error)

	// TestFixedNoContentWithResponse request
	TestFixedNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedNoContentResponse, error)

	// TestFixedOtherWithResponse request
	TestFixedOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedOtherResponse, error)

	// TestFixedSpecialJSONWithResponse request
	TestFixedSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedSpecialJSONResponse, error)

	// TestFixedWildcardWithResponse request
	TestFixedWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedWildcardResponse, error)

	// TestFormdataWithResponse request
	TestFormdataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFormdataResponse, error)

	// TestHeaderFixedFormdataWithResponse request
	TestHeaderFixedFormdataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedFormdataResponse, error)

	// TestHeaderFixedJSONWithResponse request
	TestHeaderFixedJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedJSONResponse, error)

	// TestHeaderFixedMultipartWithResponse request
	TestHeaderFixedMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedMultipartResponse, error)

	// TestHeaderFixedMultipartRelatedWithResponse request
	TestHeaderFixedMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedMultipartRelatedResponse, error)

	// TestHeaderFixedOtherWithResponse request
	TestHeaderFixedOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedOtherResponse, error)

	// TestHeaderFixedSpecialJSONWithResponse request
	TestHeaderFixedSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedSpecialJSONResponse, error)

	// TestHeaderFixedWildcardWithResponse request
	TestHeaderFixedWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedWildcardResponse, error)

	// TestHeaderFormdataWithResponse request
	TestHeaderFormdataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFormdataResponse, error)

	// TestHeaderJSONWithResponse request
	TestHeaderJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderJSONResponse, error)

	// TestHeaderMultipartWithResponse request
	TestHeaderMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderMultipartResponse, error)

	// TestHeaderMultipartRelatedWithResponse request
	TestHeaderMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderMultipartRelatedResponse, error)

	// TestHeaderOtherWithResponse request
	TestHeaderOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderOtherResponse, error)

	// TestHeaderSpecialJSONWithResponse request
	TestHeaderSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderSpecialJSONResponse, error)

	// TestHeaderWildcardWithResponse request
	TestHeaderWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderWildcardResponse, error)

	// TestJSONWithResponse request
	TestJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestJSONResponse, error)

	// TestMultipartWithResponse request
	TestMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestMultipartResponse, error)

	// TestMultipartRelatedWithResponse request
	TestMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestMultipartRelatedResponse, error)

	// TestNoContentWithResponse request
	TestNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestNoContentResponse, error)

	// TestOtherWithResponse request
	TestOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestOtherResponse, error)

	// TestRefFixedJSONWithResponse request
	TestRefFixedJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedJSONResponse, error)

	// TestRefFixedMultipartWithResponse request
	TestRefFixedMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedMultipartResponse, error)

	// TestRefFixedMultipartRelatedWithResponse request
	TestRefFixedMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedMultipartRelatedResponse, error)

	// TestRefFixedNoContentWithResponse request
	TestRefFixedNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedNoContentResponse, error)

	// TestRefFixedOtherWithResponse request
	TestRefFixedOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedOtherResponse, error)

	// TestRefFixedSpecialJSONWithResponse request
	TestRefFixedSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedSpecialJSONResponse, error)

	// TestRefFixedWildcardWithResponse request
	TestRefFixedWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedWildcardResponse, error)

	// TestRefHeaderFixedJSONWithResponse request
	TestRefHeaderFixedJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedJSONResponse, error)

	// TestRefHeaderFixedMultipartWithResponse request
	TestRefHeaderFixedMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedMultipartResponse, error)

	// TestRefHeaderFixedMultipartRelatedWithResponse request
	TestRefHeaderFixedMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedMultipartRelatedResponse, error)

	// TestRefHeaderFixedOtherWithResponse request
	TestRefHeaderFixedOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedOtherResponse, error)

	// TestRefHeaderFixedSpecialJSONWithResponse request
	TestRefHeaderFixedSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedSpecialJSONResponse, error)

	// TestRefHeaderFixedWildcardWithResponse request
	TestRefHeaderFixedWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedWildcardResponse, error)

	// TestRefHeaderJSONWithResponse request
	TestRefHeaderJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderJSONResponse, error)

	// TestRefHeaderMultipartWithResponse request
	TestRefHeaderMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderMultipartResponse, error)

	// TestRefHeaderMultipartRelatedWithResponse request
	TestRefHeaderMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderMultipartRelatedResponse, error)

	// TestRefHeaderOtherWithResponse request
	TestRefHeaderOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderOtherResponse, error)

	// TestRefHeaderSpecialJSONWithResponse request
	TestRefHeaderSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderSpecialJSONResponse, error)

	// TestRefHeaderWildcardWithResponse request
	TestRefHeaderWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderWildcardResponse, error)

	// TestRefJSONWithResponse request
	TestRefJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefJSONResponse, error)

	// TestRefMultipartWithResponse request
	TestRefMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefMultipartResponse, error)

	// TestRefMultipartRelatedWithResponse request
	TestRefMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefMultipartRelatedResponse, error)

	// TestRefNoContentWithResponse request
	TestRefNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefNoContentResponse, error)

	// TestRefOtherWithResponse request
	TestRefOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefOtherResponse, error)

	// TestRefSpecialJSONWithResponse request
	TestRefSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefSpecialJSONResponse, error)

	// TestRefWildcardWithResponse request
	TestRefWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefWildcardResponse, error)

	// TestSpecialJSONWithResponse request
	TestSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestSpecialJSONResponse, error)

	// TestWildcardWithResponse request
	TestWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestWildcardResponse, error)
}

type TestFixedFormdataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestFixedFormdataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestFixedFormdataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestFixedJSONResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestSchema
}

// Status returns HTTPResponse.Status
func (r TestFixedJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestFixedJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestFixedMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestFixedMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestFixedMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestFixedMultipartRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestFixedMultipartRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestFixedMultipartRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestFixedNoContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestFixedNoContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestFixedNoContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestFixedOtherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestFixedOtherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestFixedOtherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestFixedSpecialJSONResponse struct {
	Body                   []byte
	HTTPResponse           *http.Response
	ApplicationtestJSON200 *TestSchema
}

// Status returns HTTPResponse.Status
func (r TestFixedSpecialJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestFixedSpecialJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestFixedWildcardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestFixedWildcardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestFixedWildcardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestFormdataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestFormdataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestFormdataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderFixedFormdataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestHeaderFixedFormdataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderFixedFormdataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderFixedJSONResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestSchema
}

// Status returns HTTPResponse.Status
func (r TestHeaderFixedJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderFixedJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderFixedMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestHeaderFixedMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderFixedMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderFixedMultipartRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestHeaderFixedMultipartRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderFixedMultipartRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderFixedOtherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestHeaderFixedOtherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderFixedOtherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderFixedSpecialJSONResponse struct {
	Body                   []byte
	HTTPResponse           *http.Response
	ApplicationtestJSON200 *TestSchema
}

// Status returns HTTPResponse.Status
func (r TestHeaderFixedSpecialJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderFixedSpecialJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderFixedWildcardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestHeaderFixedWildcardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderFixedWildcardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderFormdataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestHeaderFormdataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderFormdataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderJSONResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *TestSchema
}

// Status returns HTTPResponse.Status
func (r TestHeaderJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestHeaderMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderMultipartRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestHeaderMultipartRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderMultipartRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderOtherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestHeaderOtherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderOtherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderSpecialJSONResponse struct {
	Body                       []byte
	HTTPResponse               *http.Response
	ApplicationtestJSONDefault *TestSchema
}

// Status returns HTTPResponse.Status
func (r TestHeaderSpecialJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderSpecialJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderWildcardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestHeaderWildcardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderWildcardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestJSONResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *TestSchema
}

// Status returns HTTPResponse.Status
func (r TestJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestMultipartRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestMultipartRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestMultipartRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestNoContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestNoContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestNoContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestOtherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestOtherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestOtherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefFixedJSONResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestRespRefFixedJSON
}

// Status returns HTTPResponse.Status
func (r TestRefFixedJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefFixedJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefFixedMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefFixedMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefFixedMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefFixedMultipartRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefFixedMultipartRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefFixedMultipartRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefFixedNoContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefFixedNoContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefFixedNoContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefFixedOtherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefFixedOtherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefFixedOtherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefFixedSpecialJSONResponse struct {
	Body                   []byte
	HTTPResponse           *http.Response
	ApplicationtestJSON200 *TestRespRefFixedSpecialJSON
}

// Status returns HTTPResponse.Status
func (r TestRefFixedSpecialJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefFixedSpecialJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefFixedWildcardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefFixedWildcardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefFixedWildcardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderFixedJSONResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestRespRefHeaderFixedJSON
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderFixedJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderFixedJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderFixedMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderFixedMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderFixedMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderFixedMultipartRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderFixedMultipartRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderFixedMultipartRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderFixedOtherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderFixedOtherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderFixedOtherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderFixedSpecialJSONResponse struct {
	Body                   []byte
	HTTPResponse           *http.Response
	ApplicationtestJSON200 *TestRespRefHeaderFixedSpecialJSON
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderFixedSpecialJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderFixedSpecialJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderFixedWildcardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderFixedWildcardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderFixedWildcardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderJSONResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *TestRespRefHeaderJSON
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderMultipartRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderMultipartRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderMultipartRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderOtherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderOtherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderOtherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderSpecialJSONResponse struct {
	Body                       []byte
	HTTPResponse               *http.Response
	ApplicationtestJSONDefault *TestRespRefHeaderSpecialJSON
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderSpecialJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderSpecialJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderWildcardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderWildcardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderWildcardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefJSONResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *TestRespRefJSON
}

// Status returns HTTPResponse.Status
func (r TestRefJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefMultipartRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefMultipartRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefMultipartRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefNoContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefNoContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefNoContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefOtherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefOtherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefOtherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefSpecialJSONResponse struct {
	Body                       []byte
	HTTPResponse               *http.Response
	ApplicationtestJSONDefault *TestRespRefSpecialJSON
}

// Status returns HTTPResponse.Status
func (r TestRefSpecialJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefSpecialJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefWildcardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefWildcardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefWildcardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestSpecialJSONResponse struct {
	Body                       []byte
	HTTPResponse               *http.Response
	ApplicationtestJSONDefault *TestSchema
}

// Status returns HTTPResponse.Status
func (r TestSpecialJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestSpecialJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestWildcardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestWildcardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestWildcardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TestFixedFormdataWithResponse request returning *TestFixedFormdataResponse
func (c *ClientWithResponses) TestFixedFormdataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedFormdataResponse, error) {
	rsp, err := c.TestFixedFormdata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestFixedFormdataResponse(rsp)
}

// TestFixedJSONWithResponse request returning *TestFixedJSONResponse
func (c *ClientWithResponses) TestFixedJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedJSONResponse, error) {
	rsp, err := c.TestFixedJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestFixedJSONResponse(rsp)
}

// TestFixedMultipartWithResponse request returning *TestFixedMultipartResponse
func (c *ClientWithResponses) TestFixedMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedMultipartResponse, error) {
	rsp, err := c.TestFixedMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestFixedMultipartResponse(rsp)
}

// TestFixedMultipartRelatedWithResponse request returning *TestFixedMultipartRelatedResponse
func (c *ClientWithResponses) TestFixedMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedMultipartRelatedResponse, error) {
	rsp, err := c.TestFixedMultipartRelated(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestFixedMultipartRelatedResponse(rsp)
}

// TestFixedNoContentWithResponse request returning *TestFixedNoContentResponse
func (c *ClientWithResponses) TestFixedNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedNoContentResponse, error) {
	rsp, err := c.TestFixedNoContent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestFixedNoContentResponse(rsp)
}

// TestFixedOtherWithResponse request returning *TestFixedOtherResponse
func (c *ClientWithResponses) TestFixedOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedOtherResponse, error) {
	rsp, err := c.TestFixedOther(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestFixedOtherResponse(rsp)
}

// TestFixedSpecialJSONWithResponse request returning *TestFixedSpecialJSONResponse
func (c *ClientWithResponses) TestFixedSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedSpecialJSONResponse, error) {
	rsp, err := c.TestFixedSpecialJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestFixedSpecialJSONResponse(rsp)
}

// TestFixedWildcardWithResponse request returning *TestFixedWildcardResponse
func (c *ClientWithResponses) TestFixedWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedWildcardResponse, error) {
	rsp, err := c.TestFixedWildcard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestFixedWildcardResponse(rsp)
}

// TestFormdataWithResponse request returning *TestFormdataResponse
func (c *ClientWithResponses) TestFormdataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFormdataResponse, error) {
	rsp, err := c.TestFormdata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestFormdataResponse(rsp)
}

// TestHeaderFixedFormdataWithResponse request returning *TestHeaderFixedFormdataResponse
func (c *ClientWithResponses) TestHeaderFixedFormdataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedFormdataResponse, error) {
	rsp, err := c.TestHeaderFixedFormdata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderFixedFormdataResponse(rsp)
}

// TestHeaderFixedJSONWithResponse request returning *TestHeaderFixedJSONResponse
func (c *ClientWithResponses) TestHeaderFixedJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedJSONResponse, error) {
	rsp, err := c.TestHeaderFixedJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderFixedJSONResponse(rsp)
}

// TestHeaderFixedMultipartWithResponse request returning *TestHeaderFixedMultipartResponse
func (c *ClientWithResponses) TestHeaderFixedMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedMultipartResponse, error) {
	rsp, err := c.TestHeaderFixedMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderFixedMultipartResponse(rsp)
}

// TestHeaderFixedMultipartRelatedWithResponse request returning *TestHeaderFixedMultipartRelatedResponse
func (c *ClientWithResponses) TestHeaderFixedMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedMultipartRelatedResponse, error) {
	rsp, err := c.TestHeaderFixedMultipartRelated(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderFixedMultipartRelatedResponse(rsp)
}

// TestHeaderFixedOtherWithResponse request returning *TestHeaderFixedOtherResponse
func (c *ClientWithResponses) TestHeaderFixedOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedOtherResponse, error) {
	rsp, err := c.TestHeaderFixedOther(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderFixedOtherResponse(rsp)
}

// TestHeaderFixedSpecialJSONWithResponse request returning *TestHeaderFixedSpecialJSONResponse
func (c *ClientWithResponses) TestHeaderFixedSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedSpecialJSONResponse, error) {
	rsp, err := c.TestHeaderFixedSpecialJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderFixedSpecialJSONResponse(rsp)
}

// TestHeaderFixedWildcardWithResponse request returning *TestHeaderFixedWildcardResponse
func (c *ClientWithResponses) TestHeaderFixedWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedWildcardResponse, error) {
	rsp, err := c.TestHeaderFixedWildcard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderFixedWildcardResponse(rsp)
}

// TestHeaderFormdataWithResponse request returning *TestHeaderFormdataResponse
func (c *ClientWithResponses) TestHeaderFormdataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFormdataResponse, error) {
	rsp, err := c.TestHeaderFormdata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderFormdataResponse(rsp)
}

// TestHeaderJSONWithResponse request returning *TestHeaderJSONResponse
func (c *ClientWithResponses) TestHeaderJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderJSONResponse, error) {
	rsp, err := c.TestHeaderJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderJSONResponse(rsp)
}

// TestHeaderMultipartWithResponse request returning *TestHeaderMultipartResponse
func (c *ClientWithResponses) TestHeaderMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderMultipartResponse, error) {
	rsp, err := c.TestHeaderMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderMultipartResponse(rsp)
}

// TestHeaderMultipartRelatedWithResponse request returning *TestHeaderMultipartRelatedResponse
func (c *ClientWithResponses) TestHeaderMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderMultipartRelatedResponse, error) {
	rsp, err := c.TestHeaderMultipartRelated(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderMultipartRelatedResponse(rsp)
}

// TestHeaderOtherWithResponse request returning *TestHeaderOtherResponse
func (c *ClientWithResponses) TestHeaderOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderOtherResponse, error) {
	rsp, err := c.TestHeaderOther(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderOtherResponse(rsp)
}

// TestHeaderSpecialJSONWithResponse request returning *TestHeaderSpecialJSONResponse
func (c *ClientWithResponses) TestHeaderSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderSpecialJSONResponse, error) {
	rsp, err := c.TestHeaderSpecialJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderSpecialJSONResponse(rsp)
}

// TestHeaderWildcardWithResponse request returning *TestHeaderWildcardResponse
func (c *ClientWithResponses) TestHeaderWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderWildcardResponse, error) {
	rsp, err := c.TestHeaderWildcard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderWildcardResponse(rsp)
}

// TestJSONWithResponse request returning *TestJSONResponse
func (c *ClientWithResponses) TestJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestJSONResponse, error) {
	rsp, err := c.TestJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestJSONResponse(rsp)
}

// TestMultipartWithResponse request returning *TestMultipartResponse
func (c *ClientWithResponses) TestMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestMultipartResponse, error) {
	rsp, err := c.TestMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestMultipartResponse(rsp)
}

// TestMultipartRelatedWithResponse request returning *TestMultipartRelatedResponse
func (c *ClientWithResponses) TestMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestMultipartRelatedResponse, error) {
	rsp, err := c.TestMultipartRelated(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestMultipartRelatedResponse(rsp)
}

// TestNoContentWithResponse request returning *TestNoContentResponse
func (c *ClientWithResponses) TestNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestNoContentResponse, error) {
	rsp, err := c.TestNoContent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestNoContentResponse(rsp)
}

// TestOtherWithResponse request returning *TestOtherResponse
func (c *ClientWithResponses) TestOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestOtherResponse, error) {
	rsp, err := c.TestOther(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestOtherResponse(rsp)
}

// TestRefFixedJSONWithResponse request returning *TestRefFixedJSONResponse
func (c *ClientWithResponses) TestRefFixedJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedJSONResponse, error) {
	rsp, err := c.TestRefFixedJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefFixedJSONResponse(rsp)
}

// TestRefFixedMultipartWithResponse request returning *TestRefFixedMultipartResponse
func (c *ClientWithResponses) TestRefFixedMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedMultipartResponse, error) {
	rsp, err := c.TestRefFixedMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefFixedMultipartResponse(rsp)
}

// TestRefFixedMultipartRelatedWithResponse request returning *TestRefFixedMultipartRelatedResponse
func (c *ClientWithResponses) TestRefFixedMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedMultipartRelatedResponse, error) {
	rsp, err := c.TestRefFixedMultipartRelated(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefFixedMultipartRelatedResponse(rsp)
}

// TestRefFixedNoContentWithResponse request returning *TestRefFixedNoContentResponse
func (c *ClientWithResponses) TestRefFixedNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedNoContentResponse, error) {
	rsp, err := c.TestRefFixedNoContent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefFixedNoContentResponse(rsp)
}

// TestRefFixedOtherWithResponse request returning *TestRefFixedOtherResponse
func (c *ClientWithResponses) TestRefFixedOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedOtherResponse, error) {
	rsp, err := c.TestRefFixedOther(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefFixedOtherResponse(rsp)
}

// TestRefFixedSpecialJSONWithResponse request returning *TestRefFixedSpecialJSONResponse
func (c *ClientWithResponses) TestRefFixedSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedSpecialJSONResponse, error) {
	rsp, err := c.TestRefFixedSpecialJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefFixedSpecialJSONResponse(rsp)
}

// TestRefFixedWildcardWithResponse request returning *TestRefFixedWildcardResponse
func (c *ClientWithResponses) TestRefFixedWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedWildcardResponse, error) {
	rsp, err := c.TestRefFixedWildcard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefFixedWildcardResponse(rsp)
}

// TestRefHeaderFixedJSONWithResponse request returning *TestRefHeaderFixedJSONResponse
func (c *ClientWithResponses) TestRefHeaderFixedJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedJSONResponse, error) {
	rsp, err := c.TestRefHeaderFixedJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderFixedJSONResponse(rsp)
}

// TestRefHeaderFixedMultipartWithResponse request returning *TestRefHeaderFixedMultipartResponse
func (c *ClientWithResponses) TestRefHeaderFixedMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedMultipartResponse, error) {
	rsp, err := c.TestRefHeaderFixedMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderFixedMultipartResponse(rsp)
}

// TestRefHeaderFixedMultipartRelatedWithResponse request returning *TestRefHeaderFixedMultipartRelatedResponse
func (c *ClientWithResponses) TestRefHeaderFixedMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedMultipartRelatedResponse, error) {
	rsp, err := c.TestRefHeaderFixedMultipartRelated(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderFixedMultipartRelatedResponse(rsp)
}

// TestRefHeaderFixedOtherWithResponse request returning *TestRefHeaderFixedOtherResponse
func (c *ClientWithResponses) TestRefHeaderFixedOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedOtherResponse, error) {
	rsp, err := c.TestRefHeaderFixedOther(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderFixedOtherResponse(rsp)
}

// TestRefHeaderFixedSpecialJSONWithResponse request returning *TestRefHeaderFixedSpecialJSONResponse
func (c *ClientWithResponses) TestRefHeaderFixedSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedSpecialJSONResponse, error) {
	rsp, err := c.TestRefHeaderFixedSpecialJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderFixedSpecialJSONResponse(rsp)
}

// TestRefHeaderFixedWildcardWithResponse request returning *TestRefHeaderFixedWildcardResponse
func (c *ClientWithResponses) TestRefHeaderFixedWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedWildcardResponse, error) {
	rsp, err := c.TestRefHeaderFixedWildcard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderFixedWildcardResponse(rsp)
}

// TestRefHeaderJSONWithResponse request returning *TestRefHeaderJSONResponse
func (c *ClientWithResponses) TestRefHeaderJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderJSONResponse, error) {
	rsp, err := c.TestRefHeaderJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderJSONResponse(rsp)
}

// TestRefHeaderMultipartWithResponse request returning *TestRefHeaderMultipartResponse
func (c *ClientWithResponses) TestRefHeaderMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderMultipartResponse, error) {
	rsp, err := c.TestRefHeaderMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderMultipartResponse(rsp)
}

// TestRefHeaderMultipartRelatedWithResponse request returning *TestRefHeaderMultipartRelatedResponse
func (c *ClientWithResponses) TestRefHeaderMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderMultipartRelatedResponse, error) {
	rsp, err := c.TestRefHeaderMultipartRelated(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderMultipartRelatedResponse(rsp)
}

// TestRefHeaderOtherWithResponse request returning *TestRefHeaderOtherResponse
func (c *ClientWithResponses) TestRefHeaderOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderOtherResponse, error) {
	rsp, err := c.TestRefHeaderOther(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderOtherResponse(rsp)
}

// TestRefHeaderSpecialJSONWithResponse request returning *TestRefHeaderSpecialJSONResponse
func (c *ClientWithResponses) TestRefHeaderSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderSpecialJSONResponse, error) {
	rsp, err := c.TestRefHeaderSpecialJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderSpecialJSONResponse(rsp)
}

// TestRefHeaderWildcardWithResponse request returning *TestRefHeaderWildcardResponse
func (c *ClientWithResponses) TestRefHeaderWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderWildcardResponse, error) {
	rsp, err := c.TestRefHeaderWildcard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderWildcardResponse(rsp)
}

// TestRefJSONWithResponse request returning *TestRefJSONResponse
func (c *ClientWithResponses) TestRefJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefJSONResponse, error) {
	rsp, err := c.TestRefJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefJSONResponse(rsp)
}

// TestRefMultipartWithResponse request returning *TestRefMultipartResponse
func (c *ClientWithResponses) TestRefMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefMultipartResponse, error) {
	rsp, err := c.TestRefMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefMultipartResponse(rsp)
}

// TestRefMultipartRelatedWithResponse request returning *TestRefMultipartRelatedResponse
func (c *ClientWithResponses) TestRefMultipartRelatedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefMultipartRelatedResponse, error) {
	rsp, err := c.TestRefMultipartRelated(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefMultipartRelatedResponse(rsp)
}

// TestRefNoContentWithResponse request returning *TestRefNoContentResponse
func (c *ClientWithResponses) TestRefNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefNoContentResponse, error) {
	rsp, err := c.TestRefNoContent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefNoContentResponse(rsp)
}

// TestRefOtherWithResponse request returning *TestRefOtherResponse
func (c *ClientWithResponses) TestRefOtherWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefOtherResponse, error) {
	rsp, err := c.TestRefOther(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefOtherResponse(rsp)
}

// TestRefSpecialJSONWithResponse request returning *TestRefSpecialJSONResponse
func (c *ClientWithResponses) TestRefSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefSpecialJSONResponse, error) {
	rsp, err := c.TestRefSpecialJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefSpecialJSONResponse(rsp)
}

// TestRefWildcardWithResponse request returning *TestRefWildcardResponse
func (c *ClientWithResponses) TestRefWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefWildcardResponse, error) {
	rsp, err := c.TestRefWildcard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefWildcardResponse(rsp)
}

// TestSpecialJSONWithResponse request returning *TestSpecialJSONResponse
func (c *ClientWithResponses) TestSpecialJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestSpecialJSONResponse, error) {
	rsp, err := c.TestSpecialJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestSpecialJSONResponse(rsp)
}

// TestWildcardWithResponse request returning *TestWildcardResponse
func (c *ClientWithResponses) TestWildcardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestWildcardResponse, error) {
	rsp, err := c.TestWildcard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestWildcardResponse(rsp)
}

// ParseTestFixedFormdataResponse parses an HTTP response from a TestFixedFormdataWithResponse call
func ParseTestFixedFormdataResponse(rsp *http.Response) (*TestFixedFormdataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestFixedFormdataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestFixedJSONResponse parses an HTTP response from a TestFixedJSONWithResponse call
func ParseTestFixedJSONResponse(rsp *http.Response) (*TestFixedJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestFixedJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestFixedMultipartResponse parses an HTTP response from a TestFixedMultipartWithResponse call
func ParseTestFixedMultipartResponse(rsp *http.Response) (*TestFixedMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestFixedMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestFixedMultipartRelatedResponse parses an HTTP response from a TestFixedMultipartRelatedWithResponse call
func ParseTestFixedMultipartRelatedResponse(rsp *http.Response) (*TestFixedMultipartRelatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestFixedMultipartRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestFixedNoContentResponse parses an HTTP response from a TestFixedNoContentWithResponse call
func ParseTestFixedNoContentResponse(rsp *http.Response) (*TestFixedNoContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestFixedNoContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestFixedOtherResponse parses an HTTP response from a TestFixedOtherWithResponse call
func ParseTestFixedOtherResponse(rsp *http.Response) (*TestFixedOtherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestFixedOtherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestFixedSpecialJSONResponse parses an HTTP response from a TestFixedSpecialJSONWithResponse call
func ParseTestFixedSpecialJSONResponse(rsp *http.Response) (*TestFixedSpecialJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestFixedSpecialJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationtestJSON200 = &dest

	}

	return response, nil
}

// ParseTestFixedWildcardResponse parses an HTTP response from a TestFixedWildcardWithResponse call
func ParseTestFixedWildcardResponse(rsp *http.Response) (*TestFixedWildcardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestFixedWildcardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestFormdataResponse parses an HTTP response from a TestFormdataWithResponse call
func ParseTestFormdataResponse(rsp *http.Response) (*TestFormdataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestFormdataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestHeaderFixedFormdataResponse parses an HTTP response from a TestHeaderFixedFormdataWithResponse call
func ParseTestHeaderFixedFormdataResponse(rsp *http.Response) (*TestHeaderFixedFormdataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderFixedFormdataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestHeaderFixedJSONResponse parses an HTTP response from a TestHeaderFixedJSONWithResponse call
func ParseTestHeaderFixedJSONResponse(rsp *http.Response) (*TestHeaderFixedJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderFixedJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestHeaderFixedMultipartResponse parses an HTTP response from a TestHeaderFixedMultipartWithResponse call
func ParseTestHeaderFixedMultipartResponse(rsp *http.Response) (*TestHeaderFixedMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderFixedMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestHeaderFixedMultipartRelatedResponse parses an HTTP response from a TestHeaderFixedMultipartRelatedWithResponse call
func ParseTestHeaderFixedMultipartRelatedResponse(rsp *http.Response) (*TestHeaderFixedMultipartRelatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderFixedMultipartRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestHeaderFixedOtherResponse parses an HTTP response from a TestHeaderFixedOtherWithResponse call
func ParseTestHeaderFixedOtherResponse(rsp *http.Response) (*TestHeaderFixedOtherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderFixedOtherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestHeaderFixedSpecialJSONResponse parses an HTTP response from a TestHeaderFixedSpecialJSONWithResponse call
func ParseTestHeaderFixedSpecialJSONResponse(rsp *http.Response) (*TestHeaderFixedSpecialJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderFixedSpecialJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationtestJSON200 = &dest

	}

	return response, nil
}

// ParseTestHeaderFixedWildcardResponse parses an HTTP response from a TestHeaderFixedWildcardWithResponse call
func ParseTestHeaderFixedWildcardResponse(rsp *http.Response) (*TestHeaderFixedWildcardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderFixedWildcardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestHeaderFormdataResponse parses an HTTP response from a TestHeaderFormdataWithResponse call
func ParseTestHeaderFormdataResponse(rsp *http.Response) (*TestHeaderFormdataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderFormdataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestHeaderJSONResponse parses an HTTP response from a TestHeaderJSONWithResponse call
func ParseTestHeaderJSONResponse(rsp *http.Response) (*TestHeaderJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TestSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTestHeaderMultipartResponse parses an HTTP response from a TestHeaderMultipartWithResponse call
func ParseTestHeaderMultipartResponse(rsp *http.Response) (*TestHeaderMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestHeaderMultipartRelatedResponse parses an HTTP response from a TestHeaderMultipartRelatedWithResponse call
func ParseTestHeaderMultipartRelatedResponse(rsp *http.Response) (*TestHeaderMultipartRelatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderMultipartRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestHeaderOtherResponse parses an HTTP response from a TestHeaderOtherWithResponse call
func ParseTestHeaderOtherResponse(rsp *http.Response) (*TestHeaderOtherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderOtherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestHeaderSpecialJSONResponse parses an HTTP response from a TestHeaderSpecialJSONWithResponse call
func ParseTestHeaderSpecialJSONResponse(rsp *http.Response) (*TestHeaderSpecialJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderSpecialJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TestSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationtestJSONDefault = &dest

	}

	return response, nil
}

// ParseTestHeaderWildcardResponse parses an HTTP response from a TestHeaderWildcardWithResponse call
func ParseTestHeaderWildcardResponse(rsp *http.Response) (*TestHeaderWildcardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderWildcardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestJSONResponse parses an HTTP response from a TestJSONWithResponse call
func ParseTestJSONResponse(rsp *http.Response) (*TestJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TestSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTestMultipartResponse parses an HTTP response from a TestMultipartWithResponse call
func ParseTestMultipartResponse(rsp *http.Response) (*TestMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestMultipartRelatedResponse parses an HTTP response from a TestMultipartRelatedWithResponse call
func ParseTestMultipartRelatedResponse(rsp *http.Response) (*TestMultipartRelatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestMultipartRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestNoContentResponse parses an HTTP response from a TestNoContentWithResponse call
func ParseTestNoContentResponse(rsp *http.Response) (*TestNoContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestNoContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestOtherResponse parses an HTTP response from a TestOtherWithResponse call
func ParseTestOtherResponse(rsp *http.Response) (*TestOtherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestOtherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefFixedJSONResponse parses an HTTP response from a TestRefFixedJSONWithResponse call
func ParseTestRefFixedJSONResponse(rsp *http.Response) (*TestRefFixedJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefFixedJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestRespRefFixedJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestRefFixedMultipartResponse parses an HTTP response from a TestRefFixedMultipartWithResponse call
func ParseTestRefFixedMultipartResponse(rsp *http.Response) (*TestRefFixedMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefFixedMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefFixedMultipartRelatedResponse parses an HTTP response from a TestRefFixedMultipartRelatedWithResponse call
func ParseTestRefFixedMultipartRelatedResponse(rsp *http.Response) (*TestRefFixedMultipartRelatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefFixedMultipartRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefFixedNoContentResponse parses an HTTP response from a TestRefFixedNoContentWithResponse call
func ParseTestRefFixedNoContentResponse(rsp *http.Response) (*TestRefFixedNoContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefFixedNoContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefFixedOtherResponse parses an HTTP response from a TestRefFixedOtherWithResponse call
func ParseTestRefFixedOtherResponse(rsp *http.Response) (*TestRefFixedOtherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefFixedOtherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefFixedSpecialJSONResponse parses an HTTP response from a TestRefFixedSpecialJSONWithResponse call
func ParseTestRefFixedSpecialJSONResponse(rsp *http.Response) (*TestRefFixedSpecialJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefFixedSpecialJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestRespRefFixedSpecialJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationtestJSON200 = &dest

	}

	return response, nil
}

// ParseTestRefFixedWildcardResponse parses an HTTP response from a TestRefFixedWildcardWithResponse call
func ParseTestRefFixedWildcardResponse(rsp *http.Response) (*TestRefFixedWildcardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefFixedWildcardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefHeaderFixedJSONResponse parses an HTTP response from a TestRefHeaderFixedJSONWithResponse call
func ParseTestRefHeaderFixedJSONResponse(rsp *http.Response) (*TestRefHeaderFixedJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderFixedJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestRespRefHeaderFixedJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestRefHeaderFixedMultipartResponse parses an HTTP response from a TestRefHeaderFixedMultipartWithResponse call
func ParseTestRefHeaderFixedMultipartResponse(rsp *http.Response) (*TestRefHeaderFixedMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderFixedMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefHeaderFixedMultipartRelatedResponse parses an HTTP response from a TestRefHeaderFixedMultipartRelatedWithResponse call
func ParseTestRefHeaderFixedMultipartRelatedResponse(rsp *http.Response) (*TestRefHeaderFixedMultipartRelatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderFixedMultipartRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefHeaderFixedOtherResponse parses an HTTP response from a TestRefHeaderFixedOtherWithResponse call
func ParseTestRefHeaderFixedOtherResponse(rsp *http.Response) (*TestRefHeaderFixedOtherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderFixedOtherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefHeaderFixedSpecialJSONResponse parses an HTTP response from a TestRefHeaderFixedSpecialJSONWithResponse call
func ParseTestRefHeaderFixedSpecialJSONResponse(rsp *http.Response) (*TestRefHeaderFixedSpecialJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderFixedSpecialJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestRespRefHeaderFixedSpecialJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationtestJSON200 = &dest

	}

	return response, nil
}

// ParseTestRefHeaderFixedWildcardResponse parses an HTTP response from a TestRefHeaderFixedWildcardWithResponse call
func ParseTestRefHeaderFixedWildcardResponse(rsp *http.Response) (*TestRefHeaderFixedWildcardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderFixedWildcardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefHeaderJSONResponse parses an HTTP response from a TestRefHeaderJSONWithResponse call
func ParseTestRefHeaderJSONResponse(rsp *http.Response) (*TestRefHeaderJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TestRespRefHeaderJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTestRefHeaderMultipartResponse parses an HTTP response from a TestRefHeaderMultipartWithResponse call
func ParseTestRefHeaderMultipartResponse(rsp *http.Response) (*TestRefHeaderMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefHeaderMultipartRelatedResponse parses an HTTP response from a TestRefHeaderMultipartRelatedWithResponse call
func ParseTestRefHeaderMultipartRelatedResponse(rsp *http.Response) (*TestRefHeaderMultipartRelatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderMultipartRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefHeaderOtherResponse parses an HTTP response from a TestRefHeaderOtherWithResponse call
func ParseTestRefHeaderOtherResponse(rsp *http.Response) (*TestRefHeaderOtherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderOtherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefHeaderSpecialJSONResponse parses an HTTP response from a TestRefHeaderSpecialJSONWithResponse call
func ParseTestRefHeaderSpecialJSONResponse(rsp *http.Response) (*TestRefHeaderSpecialJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderSpecialJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TestRespRefHeaderSpecialJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationtestJSONDefault = &dest

	}

	return response, nil
}

// ParseTestRefHeaderWildcardResponse parses an HTTP response from a TestRefHeaderWildcardWithResponse call
func ParseTestRefHeaderWildcardResponse(rsp *http.Response) (*TestRefHeaderWildcardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderWildcardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefJSONResponse parses an HTTP response from a TestRefJSONWithResponse call
func ParseTestRefJSONResponse(rsp *http.Response) (*TestRefJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TestRespRefJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTestRefMultipartResponse parses an HTTP response from a TestRefMultipartWithResponse call
func ParseTestRefMultipartResponse(rsp *http.Response) (*TestRefMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefMultipartRelatedResponse parses an HTTP response from a TestRefMultipartRelatedWithResponse call
func ParseTestRefMultipartRelatedResponse(rsp *http.Response) (*TestRefMultipartRelatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefMultipartRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefNoContentResponse parses an HTTP response from a TestRefNoContentWithResponse call
func ParseTestRefNoContentResponse(rsp *http.Response) (*TestRefNoContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefNoContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefOtherResponse parses an HTTP response from a TestRefOtherWithResponse call
func ParseTestRefOtherResponse(rsp *http.Response) (*TestRefOtherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefOtherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefSpecialJSONResponse parses an HTTP response from a TestRefSpecialJSONWithResponse call
func ParseTestRefSpecialJSONResponse(rsp *http.Response) (*TestRefSpecialJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefSpecialJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TestRespRefSpecialJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationtestJSONDefault = &dest

	}

	return response, nil
}

// ParseTestRefWildcardResponse parses an HTTP response from a TestRefWildcardWithResponse call
func ParseTestRefWildcardResponse(rsp *http.Response) (*TestRefWildcardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefWildcardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestSpecialJSONResponse parses an HTTP response from a TestSpecialJSONWithResponse call
func ParseTestSpecialJSONResponse(rsp *http.Response) (*TestSpecialJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestSpecialJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TestSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationtestJSONDefault = &dest

	}

	return response, nil
}

// ParseTestWildcardResponse parses an HTTP response from a TestWildcardWithResponse call
func ParseTestWildcardResponse(rsp *http.Response) (*TestWildcardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestWildcardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /test-fixed-formdata)
	TestFixedFormdata(ctx iris.Context)

	// (GET /test-fixed-json)
	TestFixedJSON(ctx iris.Context)

	// (GET /test-fixed-multipart)
	TestFixedMultipart(ctx iris.Context)

	// (GET /test-fixed-multipart-related)
	TestFixedMultipartRelated(ctx iris.Context)

	// (GET /test-fixed-nocontent)
	TestFixedNoContent(ctx iris.Context)

	// (GET /test-fixed-other)
	TestFixedOther(ctx iris.Context)

	// (GET /test-fixed-special-json)
	TestFixedSpecialJSON(ctx iris.Context)

	// (GET /test-fixed-wildcard)
	TestFixedWildcard(ctx iris.Context)

	// (GET /test-formdata)
	TestFormdata(ctx iris.Context)

	// (GET /test-header-fixed-formdata)
	TestHeaderFixedFormdata(ctx iris.Context)

	// (GET /test-header-fixed-json)
	TestHeaderFixedJSON(ctx iris.Context)

	// (GET /test-header-fixed-multipart)
	TestHeaderFixedMultipart(ctx iris.Context)

	// (GET /test-header-fixed-multipart-related)
	TestHeaderFixedMultipartRelated(ctx iris.Context)

	// (GET /test-header-fixed-other)
	TestHeaderFixedOther(ctx iris.Context)

	// (GET /test-header-fixed-special-json)
	TestHeaderFixedSpecialJSON(ctx iris.Context)

	// (GET /test-header-fixed-wildcard)
	TestHeaderFixedWildcard(ctx iris.Context)

	// (GET /test-header-formdata)
	TestHeaderFormdata(ctx iris.Context)

	// (GET /test-header-json)
	TestHeaderJSON(ctx iris.Context)

	// (GET /test-header-multipart)
	TestHeaderMultipart(ctx iris.Context)

	// (GET /test-header-multipart-related)
	TestHeaderMultipartRelated(ctx iris.Context)

	// (GET /test-header-other)
	TestHeaderOther(ctx iris.Context)

	// (GET /test-header-special-json)
	TestHeaderSpecialJSON(ctx iris.Context)

	// (GET /test-header-wildcard)
	TestHeaderWildcard(ctx iris.Context)

	// (GET /test-json)
	TestJSON(ctx iris.Context)

	// (GET /test-multipart)
	TestMultipart(ctx iris.Context)

	// (GET /test-multipart-related)
	TestMultipartRelated(ctx iris.Context)

	// (GET /test-nocontent)
	TestNoContent(ctx iris.Context)

	// (GET /test-other)
	TestOther(ctx iris.Context)

	// (GET /test-ref-fixed-json)
	TestRefFixedJSON(ctx iris.Context)

	// (GET /test-ref-fixed-multipart)
	TestRefFixedMultipart(ctx iris.Context)

	// (GET /test-ref-fixed-multipart-related)
	TestRefFixedMultipartRelated(ctx iris.Context)

	// (GET /test-ref-fixed-nocontent)
	TestRefFixedNoContent(ctx iris.Context)

	// (GET /test-ref-fixed-other)
	TestRefFixedOther(ctx iris.Context)

	// (GET /test-ref-fixed-special-json)
	TestRefFixedSpecialJSON(ctx iris.Context)

	// (GET /test-ref-fixed-wildcard)
	TestRefFixedWildcard(ctx iris.Context)

	// (GET /test-ref-header-fixed-json)
	TestRefHeaderFixedJSON(ctx iris.Context)

	// (GET /test-ref-header-fixed-multipart)
	TestRefHeaderFixedMultipart(ctx iris.Context)

	// (GET /test-ref-header-fixed-multipart-related)
	TestRefHeaderFixedMultipartRelated(ctx iris.Context)

	// (GET /test-ref-header-fixed-other)
	TestRefHeaderFixedOther(ctx iris.Context)

	// (GET /test-ref-header-fixed-special-json)
	TestRefHeaderFixedSpecialJSON(ctx iris.Context)

	// (GET /test-ref-header-fixed-wildcard)
	TestRefHeaderFixedWildcard(ctx iris.Context)

	// (GET /test-ref-header-json)
	TestRefHeaderJSON(ctx iris.Context)

	// (GET /test-ref-header-multipart)
	TestRefHeaderMultipart(ctx iris.Context)

	// (GET /test-ref-header-multipart-related)
	TestRefHeaderMultipartRelated(ctx iris.Context)

	// (GET /test-ref-header-other)
	TestRefHeaderOther(ctx iris.Context)

	// (GET /test-ref-header-special-json)
	TestRefHeaderSpecialJSON(ctx iris.Context)

	// (GET /test-ref-header-wildcard)
	TestRefHeaderWildcard(ctx iris.Context)

	// (GET /test-ref-json)
	TestRefJSON(ctx iris.Context)

	// (GET /test-ref-multipart)
	TestRefMultipart(ctx iris.Context)

	// (GET /test-ref-multipart-related)
	TestRefMultipartRelated(ctx iris.Context)

	// (GET /test-ref-nocontent)
	TestRefNoContent(ctx iris.Context)

	// (GET /test-ref-other)
	TestRefOther(ctx iris.Context)

	// (GET /test-ref-special-json)
	TestRefSpecialJSON(ctx iris.Context)

	// (GET /test-ref-wildcard)
	TestRefWildcard(ctx iris.Context)

	// (GET /test-special-json)
	TestSpecialJSON(ctx iris.Context)

	// (GET /test-wildcard)
	TestWildcard(ctx iris.Context)
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc iris.Handler

// TestFixedFormdata converts iris context to params.
func (w *ServerInterfaceWrapper) TestFixedFormdata(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestFixedFormdata(ctx)
}

// TestFixedJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestFixedJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestFixedJSON(ctx)
}

// TestFixedMultipart converts iris context to params.
func (w *ServerInterfaceWrapper) TestFixedMultipart(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestFixedMultipart(ctx)
}

// TestFixedMultipartRelated converts iris context to params.
func (w *ServerInterfaceWrapper) TestFixedMultipartRelated(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestFixedMultipartRelated(ctx)
}

// TestFixedNoContent converts iris context to params.
func (w *ServerInterfaceWrapper) TestFixedNoContent(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestFixedNoContent(ctx)
}

// TestFixedOther converts iris context to params.
func (w *ServerInterfaceWrapper) TestFixedOther(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestFixedOther(ctx)
}

// TestFixedSpecialJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestFixedSpecialJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestFixedSpecialJSON(ctx)
}

// TestFixedWildcard converts iris context to params.
func (w *ServerInterfaceWrapper) TestFixedWildcard(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestFixedWildcard(ctx)
}

// TestFormdata converts iris context to params.
func (w *ServerInterfaceWrapper) TestFormdata(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestFormdata(ctx)
}

// TestHeaderFixedFormdata converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderFixedFormdata(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderFixedFormdata(ctx)
}

// TestHeaderFixedJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderFixedJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderFixedJSON(ctx)
}

// TestHeaderFixedMultipart converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderFixedMultipart(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderFixedMultipart(ctx)
}

// TestHeaderFixedMultipartRelated converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderFixedMultipartRelated(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderFixedMultipartRelated(ctx)
}

// TestHeaderFixedOther converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderFixedOther(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderFixedOther(ctx)
}

// TestHeaderFixedSpecialJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderFixedSpecialJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderFixedSpecialJSON(ctx)
}

// TestHeaderFixedWildcard converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderFixedWildcard(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderFixedWildcard(ctx)
}

// TestHeaderFormdata converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderFormdata(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderFormdata(ctx)
}

// TestHeaderJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderJSON(ctx)
}

// TestHeaderMultipart converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderMultipart(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderMultipart(ctx)
}

// TestHeaderMultipartRelated converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderMultipartRelated(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderMultipartRelated(ctx)
}

// TestHeaderOther converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderOther(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderOther(ctx)
}

// TestHeaderSpecialJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderSpecialJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderSpecialJSON(ctx)
}

// TestHeaderWildcard converts iris context to params.
func (w *ServerInterfaceWrapper) TestHeaderWildcard(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestHeaderWildcard(ctx)
}

// TestJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestJSON(ctx)
}

// TestMultipart converts iris context to params.
func (w *ServerInterfaceWrapper) TestMultipart(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestMultipart(ctx)
}

// TestMultipartRelated converts iris context to params.
func (w *ServerInterfaceWrapper) TestMultipartRelated(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestMultipartRelated(ctx)
}

// TestNoContent converts iris context to params.
func (w *ServerInterfaceWrapper) TestNoContent(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestNoContent(ctx)
}

// TestOther converts iris context to params.
func (w *ServerInterfaceWrapper) TestOther(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestOther(ctx)
}

// TestRefFixedJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefFixedJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefFixedJSON(ctx)
}

// TestRefFixedMultipart converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefFixedMultipart(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefFixedMultipart(ctx)
}

// TestRefFixedMultipartRelated converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefFixedMultipartRelated(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefFixedMultipartRelated(ctx)
}

// TestRefFixedNoContent converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefFixedNoContent(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefFixedNoContent(ctx)
}

// TestRefFixedOther converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefFixedOther(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefFixedOther(ctx)
}

// TestRefFixedSpecialJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefFixedSpecialJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefFixedSpecialJSON(ctx)
}

// TestRefFixedWildcard converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefFixedWildcard(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefFixedWildcard(ctx)
}

// TestRefHeaderFixedJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefHeaderFixedJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefHeaderFixedJSON(ctx)
}

// TestRefHeaderFixedMultipart converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefHeaderFixedMultipart(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefHeaderFixedMultipart(ctx)
}

// TestRefHeaderFixedMultipartRelated converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefHeaderFixedMultipartRelated(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefHeaderFixedMultipartRelated(ctx)
}

// TestRefHeaderFixedOther converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefHeaderFixedOther(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefHeaderFixedOther(ctx)
}

// TestRefHeaderFixedSpecialJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefHeaderFixedSpecialJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefHeaderFixedSpecialJSON(ctx)
}

// TestRefHeaderFixedWildcard converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefHeaderFixedWildcard(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefHeaderFixedWildcard(ctx)
}

// TestRefHeaderJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefHeaderJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefHeaderJSON(ctx)
}

// TestRefHeaderMultipart converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefHeaderMultipart(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefHeaderMultipart(ctx)
}

// TestRefHeaderMultipartRelated converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefHeaderMultipartRelated(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefHeaderMultipartRelated(ctx)
}

// TestRefHeaderOther converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefHeaderOther(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefHeaderOther(ctx)
}

// TestRefHeaderSpecialJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefHeaderSpecialJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefHeaderSpecialJSON(ctx)
}

// TestRefHeaderWildcard converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefHeaderWildcard(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefHeaderWildcard(ctx)
}

// TestRefJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefJSON(ctx)
}

// TestRefMultipart converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefMultipart(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefMultipart(ctx)
}

// TestRefMultipartRelated converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefMultipartRelated(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefMultipartRelated(ctx)
}

// TestRefNoContent converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefNoContent(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefNoContent(ctx)
}

// TestRefOther converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefOther(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefOther(ctx)
}

// TestRefSpecialJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefSpecialJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefSpecialJSON(ctx)
}

// TestRefWildcard converts iris context to params.
func (w *ServerInterfaceWrapper) TestRefWildcard(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestRefWildcard(ctx)
}

// TestSpecialJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestSpecialJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestSpecialJSON(ctx)
}

// TestWildcard converts iris context to params.
func (w *ServerInterfaceWrapper) TestWildcard(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestWildcard(ctx)
}

// IrisServerOption is the option for iris server
type IrisServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *iris.Application, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, IrisServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *iris.Application, si ServerInterface, options IrisServerOptions) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.Get(options.BaseURL+"/test-fixed-formdata", wrapper.TestFixedFormdata)
	router.Get(options.BaseURL+"/test-fixed-json", wrapper.TestFixedJSON)
	router.Get(options.BaseURL+"/test-fixed-multipart", wrapper.TestFixedMultipart)
	router.Get(options.BaseURL+"/test-fixed-multipart-related", wrapper.TestFixedMultipartRelated)
	router.Get(options.BaseURL+"/test-fixed-nocontent", wrapper.TestFixedNoContent)
	router.Get(options.BaseURL+"/test-fixed-other", wrapper.TestFixedOther)
	router.Get(options.BaseURL+"/test-fixed-special-json", wrapper.TestFixedSpecialJSON)
	router.Get(options.BaseURL+"/test-fixed-wildcard", wrapper.TestFixedWildcard)
	router.Get(options.BaseURL+"/test-formdata", wrapper.TestFormdata)
	router.Get(options.BaseURL+"/test-header-fixed-formdata", wrapper.TestHeaderFixedFormdata)
	router.Get(options.BaseURL+"/test-header-fixed-json", wrapper.TestHeaderFixedJSON)
	router.Get(options.BaseURL+"/test-header-fixed-multipart", wrapper.TestHeaderFixedMultipart)
	router.Get(options.BaseURL+"/test-header-fixed-multipart-related", wrapper.TestHeaderFixedMultipartRelated)
	router.Get(options.BaseURL+"/test-header-fixed-other", wrapper.TestHeaderFixedOther)
	router.Get(options.BaseURL+"/test-header-fixed-special-json", wrapper.TestHeaderFixedSpecialJSON)
	router.Get(options.BaseURL+"/test-header-fixed-wildcard", wrapper.TestHeaderFixedWildcard)
	router.Get(options.BaseURL+"/test-header-formdata", wrapper.TestHeaderFormdata)
	router.Get(options.BaseURL+"/test-header-json", wrapper.TestHeaderJSON)
	router.Get(options.BaseURL+"/test-header-multipart", wrapper.TestHeaderMultipart)
	router.Get(options.BaseURL+"/test-header-multipart-related", wrapper.TestHeaderMultipartRelated)
	router.Get(options.BaseURL+"/test-header-other", wrapper.TestHeaderOther)
	router.Get(options.BaseURL+"/test-header-special-json", wrapper.TestHeaderSpecialJSON)
	router.Get(options.BaseURL+"/test-header-wildcard", wrapper.TestHeaderWildcard)
	router.Get(options.BaseURL+"/test-json", wrapper.TestJSON)
	router.Get(options.BaseURL+"/test-multipart", wrapper.TestMultipart)
	router.Get(options.BaseURL+"/test-multipart-related", wrapper.TestMultipartRelated)
	router.Get(options.BaseURL+"/test-nocontent", wrapper.TestNoContent)
	router.Get(options.BaseURL+"/test-other", wrapper.TestOther)
	router.Get(options.BaseURL+"/test-ref-fixed-json", wrapper.TestRefFixedJSON)
	router.Get(options.BaseURL+"/test-ref-fixed-multipart", wrapper.TestRefFixedMultipart)
	router.Get(options.BaseURL+"/test-ref-fixed-multipart-related", wrapper.TestRefFixedMultipartRelated)
	router.Get(options.BaseURL+"/test-ref-fixed-nocontent", wrapper.TestRefFixedNoContent)
	router.Get(options.BaseURL+"/test-ref-fixed-other", wrapper.TestRefFixedOther)
	router.Get(options.BaseURL+"/test-ref-fixed-special-json", wrapper.TestRefFixedSpecialJSON)
	router.Get(options.BaseURL+"/test-ref-fixed-wildcard", wrapper.TestRefFixedWildcard)
	router.Get(options.BaseURL+"/test-ref-header-fixed-json", wrapper.TestRefHeaderFixedJSON)
	router.Get(options.BaseURL+"/test-ref-header-fixed-multipart", wrapper.TestRefHeaderFixedMultipart)
	router.Get(options.BaseURL+"/test-ref-header-fixed-multipart-related", wrapper.TestRefHeaderFixedMultipartRelated)
	router.Get(options.BaseURL+"/test-ref-header-fixed-other", wrapper.TestRefHeaderFixedOther)
	router.Get(options.BaseURL+"/test-ref-header-fixed-special-json", wrapper.TestRefHeaderFixedSpecialJSON)
	router.Get(options.BaseURL+"/test-ref-header-fixed-wildcard", wrapper.TestRefHeaderFixedWildcard)
	router.Get(options.BaseURL+"/test-ref-header-json", wrapper.TestRefHeaderJSON)
	router.Get(options.BaseURL+"/test-ref-header-multipart", wrapper.TestRefHeaderMultipart)
	router.Get(options.BaseURL+"/test-ref-header-multipart-related", wrapper.TestRefHeaderMultipartRelated)
	router.Get(options.BaseURL+"/test-ref-header-other", wrapper.TestRefHeaderOther)
	router.Get(options.BaseURL+"/test-ref-header-special-json", wrapper.TestRefHeaderSpecialJSON)
	router.Get(options.BaseURL+"/test-ref-header-wildcard", wrapper.TestRefHeaderWildcard)
	router.Get(options.BaseURL+"/test-ref-json", wrapper.TestRefJSON)
	router.Get(options.BaseURL+"/test-ref-multipart", wrapper.TestRefMultipart)
	router.Get(options.BaseURL+"/test-ref-multipart-related", wrapper.TestRefMultipartRelated)
	router.Get(options.BaseURL+"/test-ref-nocontent", wrapper.TestRefNoContent)
	router.Get(options.BaseURL+"/test-ref-other", wrapper.TestRefOther)
	router.Get(options.BaseURL+"/test-ref-special-json", wrapper.TestRefSpecialJSON)
	router.Get(options.BaseURL+"/test-ref-wildcard", wrapper.TestRefWildcard)
	router.Get(options.BaseURL+"/test-special-json", wrapper.TestSpecialJSON)
	router.Get(options.BaseURL+"/test-wildcard", wrapper.TestWildcard)

	router.Build()
}

type TestRespRefFixedJSONJSONResponse TestSchema

type TestRespRefFixedMultipartMultipartResponse func(writer *multipart.Writer) error

type TestRespRefFixedMultipartRelatedMultipartResponse func(writer *multipart.Writer) error

type TestRespRefFixedNoContentResponse struct {
}

type TestRespRefFixedOtherApplicationtestResponse struct {
	Body io.Reader

	ContentLength int64
}

type TestRespRefFixedSpecialJSONApplicationTestPlusJSONResponse TestSchema

type TestRespRefFixedWildcardApplicationResponse struct {
	Body io.Reader

	ContentType   string
	ContentLength int64
}

type TestRespRefHeaderFixedJSONResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderFixedJSONJSONResponse struct {
	Body TestSchema

	Headers TestRespRefHeaderFixedJSONResponseHeaders
}

type TestRespRefHeaderFixedMultipartResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderFixedMultipartMultipartResponse struct {
	Body func(writer *multipart.Writer) error

	Headers TestRespRefHeaderFixedMultipartResponseHeaders
}

type TestRespRefHeaderFixedMultipartRelatedResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderFixedMultipartRelatedMultipartResponse struct {
	Body func(writer *multipart.Writer) error

	Headers TestRespRefHeaderFixedMultipartRelatedResponseHeaders
}

type TestRespRefHeaderFixedOtherResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderFixedOtherApplicationtestResponse struct {
	Body io.Reader

	Headers       TestRespRefHeaderFixedOtherResponseHeaders
	ContentLength int64
}

type TestRespRefHeaderFixedSpecialJSONResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderFixedSpecialJSONApplicationTestPlusJSONResponse struct {
	Body TestSchema

	Headers TestRespRefHeaderFixedSpecialJSONResponseHeaders
}

type TestRespRefHeaderFixedWildcardResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderFixedWildcardApplicationResponse struct {
	Body io.Reader

	Headers       TestRespRefHeaderFixedWildcardResponseHeaders
	ContentType   string
	ContentLength int64
}

type TestRespRefHeaderJSONResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderJSONJSONResponse struct {
	Body TestSchema

	Headers TestRespRefHeaderJSONResponseHeaders
}

type TestRespRefHeaderMultipartResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderMultipartMultipartResponse struct {
	Body func(writer *multipart.Writer) error

	Headers TestRespRefHeaderMultipartResponseHeaders
}

type TestRespRefHeaderMultipartRelatedResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderMultipartRelatedMultipartResponse struct {
	Body func(writer *multipart.Writer) error

	Headers TestRespRefHeaderMultipartRelatedResponseHeaders
}

type TestRespRefHeaderOtherResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderOtherApplicationtestResponse struct {
	Body io.Reader

	Headers       TestRespRefHeaderOtherResponseHeaders
	ContentLength int64
}

type TestRespRefHeaderSpecialJSONResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderSpecialJSONApplicationTestPlusJSONResponse struct {
	Body TestSchema

	Headers TestRespRefHeaderSpecialJSONResponseHeaders
}

type TestRespRefHeaderWildcardResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderWildcardApplicationResponse struct {
	Body io.Reader

	Headers       TestRespRefHeaderWildcardResponseHeaders
	ContentType   string
	ContentLength int64
}

type TestRespRefJSONJSONResponse TestSchema

type TestRespRefMultipartMultipartResponse func(writer *multipart.Writer) error

type TestRespRefMultipartRelatedMultipartResponse func(writer *multipart.Writer) error

type TestRespRefNoContentResponse struct {
}

type TestRespRefOtherApplicationtestResponse struct {
	Body io.Reader

	ContentLength int64
}

type TestRespRefSpecialJSONApplicationTestPlusJSONResponse TestSchema

type TestRespRefWildcardApplicationResponse struct {
	Body io.Reader

	ContentType   string
	ContentLength int64
}

type TestFixedFormdataRequestObject struct {
}

type TestFixedFormdataResponseObject interface {
	VisitTestFixedFormdataResponse(ctx iris.Context) error
}

type TestFixedFormdata200FormdataResponse TestSchema

func (response TestFixedFormdata200FormdataResponse) VisitTestFixedFormdataResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/x-www-form-urlencoded")
	ctx.StatusCode(200)

	if form, err := runtime.MarshalForm(response, nil); err != nil {
		return err
	} else {
		_, err := ctx.WriteString(form.Encode())
		return err
	}
}

type TestFixedJSONRequestObject struct {
}

type TestFixedJSONResponseObject interface {
	VisitTestFixedJSONResponse(ctx iris.Context) error
}

type TestFixedJSON200JSONResponse TestSchema

func (response TestFixedJSON200JSONResponse) VisitTestFixedJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/json")
	ctx.StatusCode(200)

	return ctx.JSON(&response)
}

type TestFixedMultipartRequestObject struct {
}

type TestFixedMultipartResponseObject interface {
	VisitTestFixedMultipartResponse(ctx iris.Context) error
}

type TestFixedMultipart200MultipartResponse func(writer *multipart.Writer) error

func (response TestFixedMultipart200MultipartResponse) VisitTestFixedMultipartResponse(ctx iris.Context) error {
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", writer.FormDataContentType())
	ctx.StatusCode(200)

	defer writer.Close()
	return response(writer)
}

type TestFixedMultipartRelatedRequestObject struct {
}

type TestFixedMultipartRelatedResponseObject interface {
	VisitTestFixedMultipartRelatedResponse(ctx iris.Context) error
}

type TestFixedMultipartRelated200MultipartResponse func(writer *multipart.Writer) error

func (response TestFixedMultipartRelated200MultipartResponse) VisitTestFixedMultipartRelatedResponse(ctx iris.Context) error {
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	ctx.StatusCode(200)

	defer writer.Close()
	return response(writer)
}

type TestFixedNoContentRequestObject struct {
}

type TestFixedNoContentResponseObject interface {
	VisitTestFixedNoContentResponse(ctx iris.Context) error
}

type TestFixedNoContent204Response struct {
}

func (response TestFixedNoContent204Response) VisitTestFixedNoContentResponse(ctx iris.Context) error {
	ctx.StatusCode(204)
	return nil
}

type TestFixedOtherRequestObject struct {
}

type TestFixedOtherResponseObject interface {
	VisitTestFixedOtherResponse(ctx iris.Context) error
}

type TestFixedOther200ApplicationtestResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response TestFixedOther200ApplicationtestResponse) VisitTestFixedOtherResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test")
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestFixedSpecialJSONRequestObject struct {
}

type TestFixedSpecialJSONResponseObject interface {
	VisitTestFixedSpecialJSONResponse(ctx iris.Context) error
}

type TestFixedSpecialJSON200ApplicationTestPlusJSONResponse TestSchema

func (response TestFixedSpecialJSON200ApplicationTestPlusJSONResponse) VisitTestFixedSpecialJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test+json")
	ctx.StatusCode(200)

	return ctx.JSON(&response)
}

type TestFixedWildcardRequestObject struct {
}

type TestFixedWildcardResponseObject interface {
	VisitTestFixedWildcardResponse(ctx iris.Context) error
}

type TestFixedWildcard200ApplicationResponse struct {
	Body          io.Reader
	ContentType   string
	ContentLength int64
}

func (response TestFixedWildcard200ApplicationResponse) VisitTestFixedWildcardResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestFormdataRequestObject struct {
}

type TestFormdataResponseObject interface {
	VisitTestFormdataResponse(ctx iris.Context) error
}

type TestFormdatadefaultFormdataResponse struct {
	Body       TestSchema
	StatusCode int
}

func (response TestFormdatadefaultFormdataResponse) VisitTestFormdataResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/x-www-form-urlencoded")
	ctx.StatusCode(response.StatusCode)

	if form, err := runtime.MarshalForm(response.Body, nil); err != nil {
		return err
	} else {
		_, err := ctx.WriteString(form.Encode())
		return err
	}
}

type TestHeaderFixedFormdataRequestObject struct {
}

type TestHeaderFixedFormdataResponseObject interface {
	VisitTestHeaderFixedFormdataResponse(ctx iris.Context) error
}

type TestHeaderFixedFormdata200ResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderFixedFormdata200FormdataResponse struct {
	Body    TestSchema
	Headers TestHeaderFixedFormdata200ResponseHeaders
}

func (response TestHeaderFixedFormdata200FormdataResponse) VisitTestHeaderFixedFormdataResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/x-www-form-urlencoded")
	ctx.StatusCode(200)

	if form, err := runtime.MarshalForm(response.Body, nil); err != nil {
		return err
	} else {
		_, err := ctx.WriteString(form.Encode())
		return err
	}
}

type TestHeaderFixedJSONRequestObject struct {
}

type TestHeaderFixedJSONResponseObject interface {
	VisitTestHeaderFixedJSONResponse(ctx iris.Context) error
}

type TestHeaderFixedJSON200ResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderFixedJSON200JSONResponse struct {
	Body    TestSchema
	Headers TestHeaderFixedJSON200ResponseHeaders
}

func (response TestHeaderFixedJSON200JSONResponse) VisitTestHeaderFixedJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/json")
	ctx.StatusCode(200)

	return ctx.JSON(&response.Body)
}

type TestHeaderFixedMultipartRequestObject struct {
}

type TestHeaderFixedMultipartResponseObject interface {
	VisitTestHeaderFixedMultipartResponse(ctx iris.Context) error
}

type TestHeaderFixedMultipart200ResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderFixedMultipart200MultipartResponse struct {
	Body    func(writer *multipart.Writer) error
	Headers TestHeaderFixedMultipart200ResponseHeaders
}

func (response TestHeaderFixedMultipart200MultipartResponse) VisitTestHeaderFixedMultipartResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", writer.FormDataContentType())
	ctx.StatusCode(200)

	defer writer.Close()
	return response.Body(writer)
}

type TestHeaderFixedMultipartRelatedRequestObject struct {
}

type TestHeaderFixedMultipartRelatedResponseObject interface {
	VisitTestHeaderFixedMultipartRelatedResponse(ctx iris.Context) error
}

type TestHeaderFixedMultipartRelated200ResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderFixedMultipartRelated200MultipartResponse struct {
	Body    func(writer *multipart.Writer) error
	Headers TestHeaderFixedMultipartRelated200ResponseHeaders
}

func (response TestHeaderFixedMultipartRelated200MultipartResponse) VisitTestHeaderFixedMultipartRelatedResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	ctx.StatusCode(200)

	defer writer.Close()
	return response.Body(writer)
}

type TestHeaderFixedOtherRequestObject struct {
}

type TestHeaderFixedOtherResponseObject interface {
	VisitTestHeaderFixedOtherResponse(ctx iris.Context) error
}

type TestHeaderFixedOther200ResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderFixedOther200ApplicationtestResponse struct {
	Body          io.Reader
	Headers       TestHeaderFixedOther200ResponseHeaders
	ContentLength int64
}

func (response TestHeaderFixedOther200ApplicationtestResponse) VisitTestHeaderFixedOtherResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test")
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestHeaderFixedSpecialJSONRequestObject struct {
}

type TestHeaderFixedSpecialJSONResponseObject interface {
	VisitTestHeaderFixedSpecialJSONResponse(ctx iris.Context) error
}

type TestHeaderFixedSpecialJSON200ResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderFixedSpecialJSON200ApplicationTestPlusJSONResponse struct {
	Body    TestSchema
	Headers TestHeaderFixedSpecialJSON200ResponseHeaders
}

func (response TestHeaderFixedSpecialJSON200ApplicationTestPlusJSONResponse) VisitTestHeaderFixedSpecialJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test+json")
	ctx.StatusCode(200)

	return ctx.JSON(&response.Body)
}

type TestHeaderFixedWildcardRequestObject struct {
}

type TestHeaderFixedWildcardResponseObject interface {
	VisitTestHeaderFixedWildcardResponse(ctx iris.Context) error
}

type TestHeaderFixedWildcard200ResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderFixedWildcard200ApplicationResponse struct {
	Body          io.Reader
	Headers       TestHeaderFixedWildcard200ResponseHeaders
	ContentType   string
	ContentLength int64
}

func (response TestHeaderFixedWildcard200ApplicationResponse) VisitTestHeaderFixedWildcardResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestHeaderFormdataRequestObject struct {
}

type TestHeaderFormdataResponseObject interface {
	VisitTestHeaderFormdataResponse(ctx iris.Context) error
}

type TestHeaderFormdatadefaultResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderFormdatadefaultFormdataResponse struct {
	Body       TestSchema
	Headers    TestHeaderFormdatadefaultResponseHeaders
	StatusCode int
}

func (response TestHeaderFormdatadefaultFormdataResponse) VisitTestHeaderFormdataResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/x-www-form-urlencoded")
	ctx.StatusCode(response.StatusCode)

	if form, err := runtime.MarshalForm(response.Body, nil); err != nil {
		return err
	} else {
		_, err := ctx.WriteString(form.Encode())
		return err
	}
}

type TestHeaderJSONRequestObject struct {
}

type TestHeaderJSONResponseObject interface {
	VisitTestHeaderJSONResponse(ctx iris.Context) error
}

type TestHeaderJSONdefaultResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderJSONdefaultJSONResponse struct {
	Body       TestSchema
	Headers    TestHeaderJSONdefaultResponseHeaders
	StatusCode int
}

func (response TestHeaderJSONdefaultJSONResponse) VisitTestHeaderJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/json")
	ctx.StatusCode(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type TestHeaderMultipartRequestObject struct {
}

type TestHeaderMultipartResponseObject interface {
	VisitTestHeaderMultipartResponse(ctx iris.Context) error
}

type TestHeaderMultipartdefaultResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderMultipartdefaultMultipartResponse struct {
	Body       func(writer *multipart.Writer) error
	Headers    TestHeaderMultipartdefaultResponseHeaders
	StatusCode int
}

func (response TestHeaderMultipartdefaultMultipartResponse) VisitTestHeaderMultipartResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", writer.FormDataContentType())
	ctx.StatusCode(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

type TestHeaderMultipartRelatedRequestObject struct {
}

type TestHeaderMultipartRelatedResponseObject interface {
	VisitTestHeaderMultipartRelatedResponse(ctx iris.Context) error
}

type TestHeaderMultipartRelateddefaultResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderMultipartRelateddefaultMultipartResponse struct {
	Body       func(writer *multipart.Writer) error
	Headers    TestHeaderMultipartRelateddefaultResponseHeaders
	StatusCode int
}

func (response TestHeaderMultipartRelateddefaultMultipartResponse) VisitTestHeaderMultipartRelatedResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	ctx.StatusCode(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

type TestHeaderOtherRequestObject struct {
}

type TestHeaderOtherResponseObject interface {
	VisitTestHeaderOtherResponse(ctx iris.Context) error
}

type TestHeaderOtherdefaultResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderOtherdefaultApplicationtestResponse struct {
	Body          io.Reader
	Headers       TestHeaderOtherdefaultResponseHeaders
	StatusCode    int
	ContentLength int64
}

func (response TestHeaderOtherdefaultApplicationtestResponse) VisitTestHeaderOtherResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test")
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(response.StatusCode)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestHeaderSpecialJSONRequestObject struct {
}

type TestHeaderSpecialJSONResponseObject interface {
	VisitTestHeaderSpecialJSONResponse(ctx iris.Context) error
}

type TestHeaderSpecialJSONdefaultResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderSpecialJSONdefaultApplicationTestPlusJSONResponse struct {
	Body       TestSchema
	Headers    TestHeaderSpecialJSONdefaultResponseHeaders
	StatusCode int
}

func (response TestHeaderSpecialJSONdefaultApplicationTestPlusJSONResponse) VisitTestHeaderSpecialJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test+json")
	ctx.StatusCode(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type TestHeaderWildcardRequestObject struct {
}

type TestHeaderWildcardResponseObject interface {
	VisitTestHeaderWildcardResponse(ctx iris.Context) error
}

type TestHeaderWildcarddefaultResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderWildcarddefaultApplicationResponse struct {
	Body          io.Reader
	Headers       TestHeaderWildcarddefaultResponseHeaders
	StatusCode    int
	ContentType   string
	ContentLength int64
}

func (response TestHeaderWildcarddefaultApplicationResponse) VisitTestHeaderWildcardResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(response.StatusCode)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestJSONRequestObject struct {
}

type TestJSONResponseObject interface {
	VisitTestJSONResponse(ctx iris.Context) error
}

type TestJSONdefaultJSONResponse struct {
	Body       TestSchema
	StatusCode int
}

func (response TestJSONdefaultJSONResponse) VisitTestJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/json")
	ctx.StatusCode(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type TestMultipartRequestObject struct {
}

type TestMultipartResponseObject interface {
	VisitTestMultipartResponse(ctx iris.Context) error
}

type TestMultipartdefaultMultipartResponse struct {
	Body       func(writer *multipart.Writer) error
	StatusCode int
}

func (response TestMultipartdefaultMultipartResponse) VisitTestMultipartResponse(ctx iris.Context) error {
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", writer.FormDataContentType())
	ctx.StatusCode(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

type TestMultipartRelatedRequestObject struct {
}

type TestMultipartRelatedResponseObject interface {
	VisitTestMultipartRelatedResponse(ctx iris.Context) error
}

type TestMultipartRelateddefaultMultipartResponse struct {
	Body       func(writer *multipart.Writer) error
	StatusCode int
}

func (response TestMultipartRelateddefaultMultipartResponse) VisitTestMultipartRelatedResponse(ctx iris.Context) error {
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	ctx.StatusCode(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

type TestNoContentRequestObject struct {
}

type TestNoContentResponseObject interface {
	VisitTestNoContentResponse(ctx iris.Context) error
}

type TestNoContentdefaultResponse struct {
	StatusCode int
}

func (response TestNoContentdefaultResponse) VisitTestNoContentResponse(ctx iris.Context) error {
	ctx.StatusCode(response.StatusCode)
	return nil
}

type TestOtherRequestObject struct {
}

type TestOtherResponseObject interface {
	VisitTestOtherResponse(ctx iris.Context) error
}

type TestOtherdefaultApplicationtestResponse struct {
	Body          io.Reader
	StatusCode    int
	ContentLength int64
}

func (response TestOtherdefaultApplicationtestResponse) VisitTestOtherResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test")
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(response.StatusCode)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestRefFixedJSONRequestObject struct {
}

type TestRefFixedJSONResponseObject interface {
	VisitTestRefFixedJSONResponse(ctx iris.Context) error
}

type TestRefFixedJSON200JSONResponse struct {
	TestRespRefFixedJSONJSONResponse
}

func (response TestRefFixedJSON200JSONResponse) VisitTestRefFixedJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/json")
	ctx.StatusCode(200)

	return ctx.JSON(&response)
}

type TestRefFixedMultipartRequestObject struct {
}

type TestRefFixedMultipartResponseObject interface {
	VisitTestRefFixedMultipartResponse(ctx iris.Context) error
}

type TestRefFixedMultipart200MultipartResponse TestRespRefFixedMultipartMultipartResponse

func (response TestRefFixedMultipart200MultipartResponse) VisitTestRefFixedMultipartResponse(ctx iris.Context) error {
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", writer.FormDataContentType())
	ctx.StatusCode(200)

	defer writer.Close()
	return response(writer)
}

type TestRefFixedMultipartRelatedRequestObject struct {
}

type TestRefFixedMultipartRelatedResponseObject interface {
	VisitTestRefFixedMultipartRelatedResponse(ctx iris.Context) error
}

type TestRefFixedMultipartRelated200MultipartResponse TestRespRefFixedMultipartRelatedMultipartResponse

func (response TestRefFixedMultipartRelated200MultipartResponse) VisitTestRefFixedMultipartRelatedResponse(ctx iris.Context) error {
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	ctx.StatusCode(200)

	defer writer.Close()
	return response(writer)
}

type TestRefFixedNoContentRequestObject struct {
}

type TestRefFixedNoContentResponseObject interface {
	VisitTestRefFixedNoContentResponse(ctx iris.Context) error
}

type TestRefFixedNoContent204Response = TestRespRefFixedNoContentResponse

func (response TestRefFixedNoContent204Response) VisitTestRefFixedNoContentResponse(ctx iris.Context) error {
	ctx.StatusCode(204)
	return nil
}

type TestRefFixedOtherRequestObject struct {
}

type TestRefFixedOtherResponseObject interface {
	VisitTestRefFixedOtherResponse(ctx iris.Context) error
}

type TestRefFixedOther200ApplicationtestResponse struct {
	TestRespRefFixedOtherApplicationtestResponse
}

func (response TestRefFixedOther200ApplicationtestResponse) VisitTestRefFixedOtherResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test")
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestRefFixedSpecialJSONRequestObject struct {
}

type TestRefFixedSpecialJSONResponseObject interface {
	VisitTestRefFixedSpecialJSONResponse(ctx iris.Context) error
}

type TestRefFixedSpecialJSON200ApplicationTestPlusJSONResponse struct {
	TestRespRefFixedSpecialJSONApplicationTestPlusJSONResponse
}

func (response TestRefFixedSpecialJSON200ApplicationTestPlusJSONResponse) VisitTestRefFixedSpecialJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test+json")
	ctx.StatusCode(200)

	return ctx.JSON(&response)
}

type TestRefFixedWildcardRequestObject struct {
}

type TestRefFixedWildcardResponseObject interface {
	VisitTestRefFixedWildcardResponse(ctx iris.Context) error
}

type TestRefFixedWildcard200ApplicationResponse struct {
	TestRespRefFixedWildcardApplicationResponse
}

func (response TestRefFixedWildcard200ApplicationResponse) VisitTestRefFixedWildcardResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestRefHeaderFixedJSONRequestObject struct {
}

type TestRefHeaderFixedJSONResponseObject interface {
	VisitTestRefHeaderFixedJSONResponse(ctx iris.Context) error
}

type TestRefHeaderFixedJSON200JSONResponse struct {
	TestRespRefHeaderFixedJSONJSONResponse
}

func (response TestRefHeaderFixedJSON200JSONResponse) VisitTestRefHeaderFixedJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/json")
	ctx.StatusCode(200)

	return ctx.JSON(&response.Body)
}

type TestRefHeaderFixedMultipartRequestObject struct {
}

type TestRefHeaderFixedMultipartResponseObject interface {
	VisitTestRefHeaderFixedMultipartResponse(ctx iris.Context) error
}

type TestRefHeaderFixedMultipart200MultipartResponse struct {
	TestRespRefHeaderFixedMultipartMultipartResponse
}

func (response TestRefHeaderFixedMultipart200MultipartResponse) VisitTestRefHeaderFixedMultipartResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", writer.FormDataContentType())
	ctx.StatusCode(200)

	defer writer.Close()
	return response.Body(writer)
}

type TestRefHeaderFixedMultipartRelatedRequestObject struct {
}

type TestRefHeaderFixedMultipartRelatedResponseObject interface {
	VisitTestRefHeaderFixedMultipartRelatedResponse(ctx iris.Context) error
}

type TestRefHeaderFixedMultipartRelated200MultipartResponse struct {
	TestRespRefHeaderFixedMultipartRelatedMultipartResponse
}

func (response TestRefHeaderFixedMultipartRelated200MultipartResponse) VisitTestRefHeaderFixedMultipartRelatedResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	ctx.StatusCode(200)

	defer writer.Close()
	return response.Body(writer)
}

type TestRefHeaderFixedOtherRequestObject struct {
}

type TestRefHeaderFixedOtherResponseObject interface {
	VisitTestRefHeaderFixedOtherResponse(ctx iris.Context) error
}

type TestRefHeaderFixedOther200ApplicationtestResponse struct {
	TestRespRefHeaderFixedOtherApplicationtestResponse
}

func (response TestRefHeaderFixedOther200ApplicationtestResponse) VisitTestRefHeaderFixedOtherResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test")
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestRefHeaderFixedSpecialJSONRequestObject struct {
}

type TestRefHeaderFixedSpecialJSONResponseObject interface {
	VisitTestRefHeaderFixedSpecialJSONResponse(ctx iris.Context) error
}

type TestRefHeaderFixedSpecialJSON200ApplicationTestPlusJSONResponse struct {
	TestRespRefHeaderFixedSpecialJSONApplicationTestPlusJSONResponse
}

func (response TestRefHeaderFixedSpecialJSON200ApplicationTestPlusJSONResponse) VisitTestRefHeaderFixedSpecialJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test+json")
	ctx.StatusCode(200)

	return ctx.JSON(&response.Body)
}

type TestRefHeaderFixedWildcardRequestObject struct {
}

type TestRefHeaderFixedWildcardResponseObject interface {
	VisitTestRefHeaderFixedWildcardResponse(ctx iris.Context) error
}

type TestRefHeaderFixedWildcard200ApplicationResponse struct {
	TestRespRefHeaderFixedWildcardApplicationResponse
}

func (response TestRefHeaderFixedWildcard200ApplicationResponse) VisitTestRefHeaderFixedWildcardResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestRefHeaderJSONRequestObject struct {
}

type TestRefHeaderJSONResponseObject interface {
	VisitTestRefHeaderJSONResponse(ctx iris.Context) error
}

type TestRefHeaderJSONdefaultJSONResponse struct {
	Body       TestSchema
	Headers    TestRespRefHeaderJSONResponseHeaders
	StatusCode int
}

func (response TestRefHeaderJSONdefaultJSONResponse) VisitTestRefHeaderJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/json")
	ctx.StatusCode(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type TestRefHeaderMultipartRequestObject struct {
}

type TestRefHeaderMultipartResponseObject interface {
	VisitTestRefHeaderMultipartResponse(ctx iris.Context) error
}

type TestRefHeaderMultipartdefaultMultipartResponse struct {
	Body       func(writer *multipart.Writer) error
	Headers    TestRespRefHeaderMultipartResponseHeaders
	StatusCode int
}

func (response TestRefHeaderMultipartdefaultMultipartResponse) VisitTestRefHeaderMultipartResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", writer.FormDataContentType())
	ctx.StatusCode(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

type TestRefHeaderMultipartRelatedRequestObject struct {
}

type TestRefHeaderMultipartRelatedResponseObject interface {
	VisitTestRefHeaderMultipartRelatedResponse(ctx iris.Context) error
}

type TestRefHeaderMultipartRelateddefaultMultipartResponse struct {
	Body       func(writer *multipart.Writer) error
	Headers    TestRespRefHeaderMultipartRelatedResponseHeaders
	StatusCode int
}

func (response TestRefHeaderMultipartRelateddefaultMultipartResponse) VisitTestRefHeaderMultipartRelatedResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	ctx.StatusCode(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

type TestRefHeaderOtherRequestObject struct {
}

type TestRefHeaderOtherResponseObject interface {
	VisitTestRefHeaderOtherResponse(ctx iris.Context) error
}

type TestRefHeaderOtherdefaultApplicationtestResponse struct {
	Body          io.Reader
	Headers       TestRespRefHeaderOtherResponseHeaders
	StatusCode    int
	ContentLength int64
}

func (response TestRefHeaderOtherdefaultApplicationtestResponse) VisitTestRefHeaderOtherResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test")
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(response.StatusCode)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestRefHeaderSpecialJSONRequestObject struct {
}

type TestRefHeaderSpecialJSONResponseObject interface {
	VisitTestRefHeaderSpecialJSONResponse(ctx iris.Context) error
}

type TestRefHeaderSpecialJSONdefaultApplicationTestPlusJSONResponse struct {
	Body       TestSchema
	Headers    TestRespRefHeaderSpecialJSONResponseHeaders
	StatusCode int
}

func (response TestRefHeaderSpecialJSONdefaultApplicationTestPlusJSONResponse) VisitTestRefHeaderSpecialJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test+json")
	ctx.StatusCode(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type TestRefHeaderWildcardRequestObject struct {
}

type TestRefHeaderWildcardResponseObject interface {
	VisitTestRefHeaderWildcardResponse(ctx iris.Context) error
}

type TestRefHeaderWildcarddefaultApplicationResponse struct {
	Body          io.Reader
	Headers       TestRespRefHeaderWildcardResponseHeaders
	StatusCode    int
	ContentType   string
	ContentLength int64
}

func (response TestRefHeaderWildcarddefaultApplicationResponse) VisitTestRefHeaderWildcardResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	ctx.ResponseWriter().Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	ctx.ResponseWriter().Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(response.StatusCode)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestRefJSONRequestObject struct {
}

type TestRefJSONResponseObject interface {
	VisitTestRefJSONResponse(ctx iris.Context) error
}

type TestRefJSONdefaultJSONResponse struct {
	Body       TestSchema
	StatusCode int
}

func (response TestRefJSONdefaultJSONResponse) VisitTestRefJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/json")
	ctx.StatusCode(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type TestRefMultipartRequestObject struct {
}

type TestRefMultipartResponseObject interface {
	VisitTestRefMultipartResponse(ctx iris.Context) error
}

type TestRefMultipartdefaultMultipartResponse struct {
	Body       func(writer *multipart.Writer) error
	StatusCode int
}

func (response TestRefMultipartdefaultMultipartResponse) VisitTestRefMultipartResponse(ctx iris.Context) error {
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", writer.FormDataContentType())
	ctx.StatusCode(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

type TestRefMultipartRelatedRequestObject struct {
}

type TestRefMultipartRelatedResponseObject interface {
	VisitTestRefMultipartRelatedResponse(ctx iris.Context) error
}

type TestRefMultipartRelateddefaultMultipartResponse struct {
	Body       func(writer *multipart.Writer) error
	StatusCode int
}

func (response TestRefMultipartRelateddefaultMultipartResponse) VisitTestRefMultipartRelatedResponse(ctx iris.Context) error {
	writer := multipart.NewWriter(ctx.ResponseWriter())
	ctx.ResponseWriter().Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	ctx.StatusCode(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

type TestRefNoContentRequestObject struct {
}

type TestRefNoContentResponseObject interface {
	VisitTestRefNoContentResponse(ctx iris.Context) error
}

type TestRefNoContentdefaultResponse struct {
	StatusCode int
}

func (response TestRefNoContentdefaultResponse) VisitTestRefNoContentResponse(ctx iris.Context) error {
	ctx.StatusCode(response.StatusCode)
	return nil
}

type TestRefOtherRequestObject struct {
}

type TestRefOtherResponseObject interface {
	VisitTestRefOtherResponse(ctx iris.Context) error
}

type TestRefOtherdefaultApplicationtestResponse struct {
	Body          io.Reader
	StatusCode    int
	ContentLength int64
}

func (response TestRefOtherdefaultApplicationtestResponse) VisitTestRefOtherResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test")
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(response.StatusCode)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestRefSpecialJSONRequestObject struct {
}

type TestRefSpecialJSONResponseObject interface {
	VisitTestRefSpecialJSONResponse(ctx iris.Context) error
}

type TestRefSpecialJSONdefaultApplicationTestPlusJSONResponse struct {
	Body       TestSchema
	StatusCode int
}

func (response TestRefSpecialJSONdefaultApplicationTestPlusJSONResponse) VisitTestRefSpecialJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test+json")
	ctx.StatusCode(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type TestRefWildcardRequestObject struct {
}

type TestRefWildcardResponseObject interface {
	VisitTestRefWildcardResponse(ctx iris.Context) error
}

type TestRefWildcarddefaultApplicationResponse struct {
	Body          io.Reader
	StatusCode    int
	ContentType   string
	ContentLength int64
}

func (response TestRefWildcarddefaultApplicationResponse) VisitTestRefWildcardResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(response.StatusCode)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

type TestSpecialJSONRequestObject struct {
}

type TestSpecialJSONResponseObject interface {
	VisitTestSpecialJSONResponse(ctx iris.Context) error
}

type TestSpecialJSONdefaultApplicationTestPlusJSONResponse struct {
	Body       TestSchema
	StatusCode int
}

func (response TestSpecialJSONdefaultApplicationTestPlusJSONResponse) VisitTestSpecialJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/test+json")
	ctx.StatusCode(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type TestWildcardRequestObject struct {
}

type TestWildcardResponseObject interface {
	VisitTestWildcardResponse(ctx iris.Context) error
}

type TestWildcarddefaultApplicationResponse struct {
	Body          io.Reader
	StatusCode    int
	ContentType   string
	ContentLength int64
}

func (response TestWildcarddefaultApplicationResponse) VisitTestWildcardResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		ctx.ResponseWriter().Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.StatusCode(response.StatusCode)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.ResponseWriter(), response.Body)
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /test-fixed-formdata)
	TestFixedFormdata(ctx context.Context, request TestFixedFormdataRequestObject) (TestFixedFormdataResponseObject, error)

	// (GET /test-fixed-json)
	TestFixedJSON(ctx context.Context, request TestFixedJSONRequestObject) (TestFixedJSONResponseObject, error)

	// (GET /test-fixed-multipart)
	TestFixedMultipart(ctx context.Context, request TestFixedMultipartRequestObject) (TestFixedMultipartResponseObject, error)

	// (GET /test-fixed-multipart-related)
	TestFixedMultipartRelated(ctx context.Context, request TestFixedMultipartRelatedRequestObject) (TestFixedMultipartRelatedResponseObject, error)

	// (GET /test-fixed-nocontent)
	TestFixedNoContent(ctx context.Context, request TestFixedNoContentRequestObject) (TestFixedNoContentResponseObject, error)

	// (GET /test-fixed-other)
	TestFixedOther(ctx context.Context, request TestFixedOtherRequestObject) (TestFixedOtherResponseObject, error)

	// (GET /test-fixed-special-json)
	TestFixedSpecialJSON(ctx context.Context, request TestFixedSpecialJSONRequestObject) (TestFixedSpecialJSONResponseObject, error)

	// (GET /test-fixed-wildcard)
	TestFixedWildcard(ctx context.Context, request TestFixedWildcardRequestObject) (TestFixedWildcardResponseObject, error)

	// (GET /test-formdata)
	TestFormdata(ctx context.Context, request TestFormdataRequestObject) (TestFormdataResponseObject, error)

	// (GET /test-header-fixed-formdata)
	TestHeaderFixedFormdata(ctx context.Context, request TestHeaderFixedFormdataRequestObject) (TestHeaderFixedFormdataResponseObject, error)

	// (GET /test-header-fixed-json)
	TestHeaderFixedJSON(ctx context.Context, request TestHeaderFixedJSONRequestObject) (TestHeaderFixedJSONResponseObject, error)

	// (GET /test-header-fixed-multipart)
	TestHeaderFixedMultipart(ctx context.Context, request TestHeaderFixedMultipartRequestObject) (TestHeaderFixedMultipartResponseObject, error)

	// (GET /test-header-fixed-multipart-related)
	TestHeaderFixedMultipartRelated(ctx context.Context, request TestHeaderFixedMultipartRelatedRequestObject) (TestHeaderFixedMultipartRelatedResponseObject, error)

	// (GET /test-header-fixed-other)
	TestHeaderFixedOther(ctx context.Context, request TestHeaderFixedOtherRequestObject) (TestHeaderFixedOtherResponseObject, error)

	// (GET /test-header-fixed-special-json)
	TestHeaderFixedSpecialJSON(ctx context.Context, request TestHeaderFixedSpecialJSONRequestObject) (TestHeaderFixedSpecialJSONResponseObject, error)

	// (GET /test-header-fixed-wildcard)
	TestHeaderFixedWildcard(ctx context.Context, request TestHeaderFixedWildcardRequestObject) (TestHeaderFixedWildcardResponseObject, error)

	// (GET /test-header-formdata)
	TestHeaderFormdata(ctx context.Context, request TestHeaderFormdataRequestObject) (TestHeaderFormdataResponseObject, error)

	// (GET /test-header-json)
	TestHeaderJSON(ctx context.Context, request TestHeaderJSONRequestObject) (TestHeaderJSONResponseObject, error)

	// (GET /test-header-multipart)
	TestHeaderMultipart(ctx context.Context, request TestHeaderMultipartRequestObject) (TestHeaderMultipartResponseObject, error)

	// (GET /test-header-multipart-related)
	TestHeaderMultipartRelated(ctx context.Context, request TestHeaderMultipartRelatedRequestObject) (TestHeaderMultipartRelatedResponseObject, error)

	// (GET /test-header-other)
	TestHeaderOther(ctx context.Context, request TestHeaderOtherRequestObject) (TestHeaderOtherResponseObject, error)

	// (GET /test-header-special-json)
	TestHeaderSpecialJSON(ctx context.Context, request TestHeaderSpecialJSONRequestObject) (TestHeaderSpecialJSONResponseObject, error)

	// (GET /test-header-wildcard)
	TestHeaderWildcard(ctx context.Context, request TestHeaderWildcardRequestObject) (TestHeaderWildcardResponseObject, error)

	// (GET /test-json)
	TestJSON(ctx context.Context, request TestJSONRequestObject) (TestJSONResponseObject, error)

	// (GET /test-multipart)
	TestMultipart(ctx context.Context, request TestMultipartRequestObject) (TestMultipartResponseObject, error)

	// (GET /test-multipart-related)
	TestMultipartRelated(ctx context.Context, request TestMultipartRelatedRequestObject) (TestMultipartRelatedResponseObject, error)

	// (GET /test-nocontent)
	TestNoContent(ctx context.Context, request TestNoContentRequestObject) (TestNoContentResponseObject, error)

	// (GET /test-other)
	TestOther(ctx context.Context, request TestOtherRequestObject) (TestOtherResponseObject, error)

	// (GET /test-ref-fixed-json)
	TestRefFixedJSON(ctx context.Context, request TestRefFixedJSONRequestObject) (TestRefFixedJSONResponseObject, error)

	// (GET /test-ref-fixed-multipart)
	TestRefFixedMultipart(ctx context.Context, request TestRefFixedMultipartRequestObject) (TestRefFixedMultipartResponseObject, error)

	// (GET /test-ref-fixed-multipart-related)
	TestRefFixedMultipartRelated(ctx context.Context, request TestRefFixedMultipartRelatedRequestObject) (TestRefFixedMultipartRelatedResponseObject, error)

	// (GET /test-ref-fixed-nocontent)
	TestRefFixedNoContent(ctx context.Context, request TestRefFixedNoContentRequestObject) (TestRefFixedNoContentResponseObject, error)

	// (GET /test-ref-fixed-other)
	TestRefFixedOther(ctx context.Context, request TestRefFixedOtherRequestObject) (TestRefFixedOtherResponseObject, error)

	// (GET /test-ref-fixed-special-json)
	TestRefFixedSpecialJSON(ctx context.Context, request TestRefFixedSpecialJSONRequestObject) (TestRefFixedSpecialJSONResponseObject, error)

	// (GET /test-ref-fixed-wildcard)
	TestRefFixedWildcard(ctx context.Context, request TestRefFixedWildcardRequestObject) (TestRefFixedWildcardResponseObject, error)

	// (GET /test-ref-header-fixed-json)
	TestRefHeaderFixedJSON(ctx context.Context, request TestRefHeaderFixedJSONRequestObject) (TestRefHeaderFixedJSONResponseObject, error)

	// (GET /test-ref-header-fixed-multipart)
	TestRefHeaderFixedMultipart(ctx context.Context, request TestRefHeaderFixedMultipartRequestObject) (TestRefHeaderFixedMultipartResponseObject, error)

	// (GET /test-ref-header-fixed-multipart-related)
	TestRefHeaderFixedMultipartRelated(ctx context.Context, request TestRefHeaderFixedMultipartRelatedRequestObject) (TestRefHeaderFixedMultipartRelatedResponseObject, error)

	// (GET /test-ref-header-fixed-other)
	TestRefHeaderFixedOther(ctx context.Context, request TestRefHeaderFixedOtherRequestObject) (TestRefHeaderFixedOtherResponseObject, error)

	// (GET /test-ref-header-fixed-special-json)
	TestRefHeaderFixedSpecialJSON(ctx context.Context, request TestRefHeaderFixedSpecialJSONRequestObject) (TestRefHeaderFixedSpecialJSONResponseObject, error)

	// (GET /test-ref-header-fixed-wildcard)
	TestRefHeaderFixedWildcard(ctx context.Context, request TestRefHeaderFixedWildcardRequestObject) (TestRefHeaderFixedWildcardResponseObject, error)

	// (GET /test-ref-header-json)
	TestRefHeaderJSON(ctx context.Context, request TestRefHeaderJSONRequestObject) (TestRefHeaderJSONResponseObject, error)

	// (GET /test-ref-header-multipart)
	TestRefHeaderMultipart(ctx context.Context, request TestRefHeaderMultipartRequestObject) (TestRefHeaderMultipartResponseObject, error)

	// (GET /test-ref-header-multipart-related)
	TestRefHeaderMultipartRelated(ctx context.Context, request TestRefHeaderMultipartRelatedRequestObject) (TestRefHeaderMultipartRelatedResponseObject, error)

	// (GET /test-ref-header-other)
	TestRefHeaderOther(ctx context.Context, request TestRefHeaderOtherRequestObject) (TestRefHeaderOtherResponseObject, error)

	// (GET /test-ref-header-special-json)
	TestRefHeaderSpecialJSON(ctx context.Context, request TestRefHeaderSpecialJSONRequestObject) (TestRefHeaderSpecialJSONResponseObject, error)

	// (GET /test-ref-header-wildcard)
	TestRefHeaderWildcard(ctx context.Context, request TestRefHeaderWildcardRequestObject) (TestRefHeaderWildcardResponseObject, error)

	// (GET /test-ref-json)
	TestRefJSON(ctx context.Context, request TestRefJSONRequestObject) (TestRefJSONResponseObject, error)

	// (GET /test-ref-multipart)
	TestRefMultipart(ctx context.Context, request TestRefMultipartRequestObject) (TestRefMultipartResponseObject, error)

	// (GET /test-ref-multipart-related)
	TestRefMultipartRelated(ctx context.Context, request TestRefMultipartRelatedRequestObject) (TestRefMultipartRelatedResponseObject, error)

	// (GET /test-ref-nocontent)
	TestRefNoContent(ctx context.Context, request TestRefNoContentRequestObject) (TestRefNoContentResponseObject, error)

	// (GET /test-ref-other)
	TestRefOther(ctx context.Context, request TestRefOtherRequestObject) (TestRefOtherResponseObject, error)

	// (GET /test-ref-special-json)
	TestRefSpecialJSON(ctx context.Context, request TestRefSpecialJSONRequestObject) (TestRefSpecialJSONResponseObject, error)

	// (GET /test-ref-wildcard)
	TestRefWildcard(ctx context.Context, request TestRefWildcardRequestObject) (TestRefWildcardResponseObject, error)

	// (GET /test-special-json)
	TestSpecialJSON(ctx context.Context, request TestSpecialJSONRequestObject) (TestSpecialJSONResponseObject, error)

	// (GET /test-wildcard)
	TestWildcard(ctx context.Context, request TestWildcardRequestObject) (TestWildcardResponseObject, error)
}

type StrictHandlerFunc = strictiris.StrictIrisHandlerFunc
type StrictMiddlewareFunc = strictiris.StrictIrisMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// TestFixedFormdata operation middleware
func (sh *strictHandler) TestFixedFormdata(ctx iris.Context) {
	var request TestFixedFormdataRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestFixedFormdata(ctx, request.(TestFixedFormdataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestFixedFormdata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestFixedFormdataResponseObject); ok {
		if err := validResponse.VisitTestFixedFormdataResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestFixedJSON operation middleware
func (sh *strictHandler) TestFixedJSON(ctx iris.Context) {
	var request TestFixedJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestFixedJSON(ctx, request.(TestFixedJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestFixedJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestFixedJSONResponseObject); ok {
		if err := validResponse.VisitTestFixedJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestFixedMultipart operation middleware
func (sh *strictHandler) TestFixedMultipart(ctx iris.Context) {
	var request TestFixedMultipartRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestFixedMultipart(ctx, request.(TestFixedMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestFixedMultipart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestFixedMultipartResponseObject); ok {
		if err := validResponse.VisitTestFixedMultipartResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestFixedMultipartRelated operation middleware
func (sh *strictHandler) TestFixedMultipartRelated(ctx iris.Context) {
	var request TestFixedMultipartRelatedRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestFixedMultipartRelated(ctx, request.(TestFixedMultipartRelatedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestFixedMultipartRelated")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestFixedMultipartRelatedResponseObject); ok {
		if err := validResponse.VisitTestFixedMultipartRelatedResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestFixedNoContent operation middleware
func (sh *strictHandler) TestFixedNoContent(ctx iris.Context) {
	var request TestFixedNoContentRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestFixedNoContent(ctx, request.(TestFixedNoContentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestFixedNoContent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestFixedNoContentResponseObject); ok {
		if err := validResponse.VisitTestFixedNoContentResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestFixedOther operation middleware
func (sh *strictHandler) TestFixedOther(ctx iris.Context) {
	var request TestFixedOtherRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestFixedOther(ctx, request.(TestFixedOtherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestFixedOther")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestFixedOtherResponseObject); ok {
		if err := validResponse.VisitTestFixedOtherResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestFixedSpecialJSON operation middleware
func (sh *strictHandler) TestFixedSpecialJSON(ctx iris.Context) {
	var request TestFixedSpecialJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestFixedSpecialJSON(ctx, request.(TestFixedSpecialJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestFixedSpecialJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestFixedSpecialJSONResponseObject); ok {
		if err := validResponse.VisitTestFixedSpecialJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestFixedWildcard operation middleware
func (sh *strictHandler) TestFixedWildcard(ctx iris.Context) {
	var request TestFixedWildcardRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestFixedWildcard(ctx, request.(TestFixedWildcardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestFixedWildcard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestFixedWildcardResponseObject); ok {
		if err := validResponse.VisitTestFixedWildcardResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestFormdata operation middleware
func (sh *strictHandler) TestFormdata(ctx iris.Context) {
	var request TestFormdataRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestFormdata(ctx, request.(TestFormdataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestFormdata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestFormdataResponseObject); ok {
		if err := validResponse.VisitTestFormdataResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderFixedFormdata operation middleware
func (sh *strictHandler) TestHeaderFixedFormdata(ctx iris.Context) {
	var request TestHeaderFixedFormdataRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderFixedFormdata(ctx, request.(TestHeaderFixedFormdataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderFixedFormdata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderFixedFormdataResponseObject); ok {
		if err := validResponse.VisitTestHeaderFixedFormdataResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderFixedJSON operation middleware
func (sh *strictHandler) TestHeaderFixedJSON(ctx iris.Context) {
	var request TestHeaderFixedJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderFixedJSON(ctx, request.(TestHeaderFixedJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderFixedJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderFixedJSONResponseObject); ok {
		if err := validResponse.VisitTestHeaderFixedJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderFixedMultipart operation middleware
func (sh *strictHandler) TestHeaderFixedMultipart(ctx iris.Context) {
	var request TestHeaderFixedMultipartRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderFixedMultipart(ctx, request.(TestHeaderFixedMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderFixedMultipart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderFixedMultipartResponseObject); ok {
		if err := validResponse.VisitTestHeaderFixedMultipartResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderFixedMultipartRelated operation middleware
func (sh *strictHandler) TestHeaderFixedMultipartRelated(ctx iris.Context) {
	var request TestHeaderFixedMultipartRelatedRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderFixedMultipartRelated(ctx, request.(TestHeaderFixedMultipartRelatedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderFixedMultipartRelated")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderFixedMultipartRelatedResponseObject); ok {
		if err := validResponse.VisitTestHeaderFixedMultipartRelatedResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderFixedOther operation middleware
func (sh *strictHandler) TestHeaderFixedOther(ctx iris.Context) {
	var request TestHeaderFixedOtherRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderFixedOther(ctx, request.(TestHeaderFixedOtherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderFixedOther")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderFixedOtherResponseObject); ok {
		if err := validResponse.VisitTestHeaderFixedOtherResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderFixedSpecialJSON operation middleware
func (sh *strictHandler) TestHeaderFixedSpecialJSON(ctx iris.Context) {
	var request TestHeaderFixedSpecialJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderFixedSpecialJSON(ctx, request.(TestHeaderFixedSpecialJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderFixedSpecialJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderFixedSpecialJSONResponseObject); ok {
		if err := validResponse.VisitTestHeaderFixedSpecialJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderFixedWildcard operation middleware
func (sh *strictHandler) TestHeaderFixedWildcard(ctx iris.Context) {
	var request TestHeaderFixedWildcardRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderFixedWildcard(ctx, request.(TestHeaderFixedWildcardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderFixedWildcard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderFixedWildcardResponseObject); ok {
		if err := validResponse.VisitTestHeaderFixedWildcardResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderFormdata operation middleware
func (sh *strictHandler) TestHeaderFormdata(ctx iris.Context) {
	var request TestHeaderFormdataRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderFormdata(ctx, request.(TestHeaderFormdataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderFormdata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderFormdataResponseObject); ok {
		if err := validResponse.VisitTestHeaderFormdataResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderJSON operation middleware
func (sh *strictHandler) TestHeaderJSON(ctx iris.Context) {
	var request TestHeaderJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderJSON(ctx, request.(TestHeaderJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderJSONResponseObject); ok {
		if err := validResponse.VisitTestHeaderJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderMultipart operation middleware
func (sh *strictHandler) TestHeaderMultipart(ctx iris.Context) {
	var request TestHeaderMultipartRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderMultipart(ctx, request.(TestHeaderMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderMultipart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderMultipartResponseObject); ok {
		if err := validResponse.VisitTestHeaderMultipartResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderMultipartRelated operation middleware
func (sh *strictHandler) TestHeaderMultipartRelated(ctx iris.Context) {
	var request TestHeaderMultipartRelatedRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderMultipartRelated(ctx, request.(TestHeaderMultipartRelatedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderMultipartRelated")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderMultipartRelatedResponseObject); ok {
		if err := validResponse.VisitTestHeaderMultipartRelatedResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderOther operation middleware
func (sh *strictHandler) TestHeaderOther(ctx iris.Context) {
	var request TestHeaderOtherRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderOther(ctx, request.(TestHeaderOtherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderOther")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderOtherResponseObject); ok {
		if err := validResponse.VisitTestHeaderOtherResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderSpecialJSON operation middleware
func (sh *strictHandler) TestHeaderSpecialJSON(ctx iris.Context) {
	var request TestHeaderSpecialJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderSpecialJSON(ctx, request.(TestHeaderSpecialJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderSpecialJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderSpecialJSONResponseObject); ok {
		if err := validResponse.VisitTestHeaderSpecialJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestHeaderWildcard operation middleware
func (sh *strictHandler) TestHeaderWildcard(ctx iris.Context) {
	var request TestHeaderWildcardRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderWildcard(ctx, request.(TestHeaderWildcardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderWildcard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestHeaderWildcardResponseObject); ok {
		if err := validResponse.VisitTestHeaderWildcardResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestJSON operation middleware
func (sh *strictHandler) TestJSON(ctx iris.Context) {
	var request TestJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestJSON(ctx, request.(TestJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestJSONResponseObject); ok {
		if err := validResponse.VisitTestJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestMultipart operation middleware
func (sh *strictHandler) TestMultipart(ctx iris.Context) {
	var request TestMultipartRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestMultipart(ctx, request.(TestMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestMultipart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestMultipartResponseObject); ok {
		if err := validResponse.VisitTestMultipartResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestMultipartRelated operation middleware
func (sh *strictHandler) TestMultipartRelated(ctx iris.Context) {
	var request TestMultipartRelatedRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestMultipartRelated(ctx, request.(TestMultipartRelatedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestMultipartRelated")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestMultipartRelatedResponseObject); ok {
		if err := validResponse.VisitTestMultipartRelatedResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestNoContent operation middleware
func (sh *strictHandler) TestNoContent(ctx iris.Context) {
	var request TestNoContentRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestNoContent(ctx, request.(TestNoContentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestNoContent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestNoContentResponseObject); ok {
		if err := validResponse.VisitTestNoContentResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestOther operation middleware
func (sh *strictHandler) TestOther(ctx iris.Context) {
	var request TestOtherRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestOther(ctx, request.(TestOtherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestOther")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestOtherResponseObject); ok {
		if err := validResponse.VisitTestOtherResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefFixedJSON operation middleware
func (sh *strictHandler) TestRefFixedJSON(ctx iris.Context) {
	var request TestRefFixedJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefFixedJSON(ctx, request.(TestRefFixedJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefFixedJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefFixedJSONResponseObject); ok {
		if err := validResponse.VisitTestRefFixedJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefFixedMultipart operation middleware
func (sh *strictHandler) TestRefFixedMultipart(ctx iris.Context) {
	var request TestRefFixedMultipartRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefFixedMultipart(ctx, request.(TestRefFixedMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefFixedMultipart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefFixedMultipartResponseObject); ok {
		if err := validResponse.VisitTestRefFixedMultipartResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefFixedMultipartRelated operation middleware
func (sh *strictHandler) TestRefFixedMultipartRelated(ctx iris.Context) {
	var request TestRefFixedMultipartRelatedRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefFixedMultipartRelated(ctx, request.(TestRefFixedMultipartRelatedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefFixedMultipartRelated")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefFixedMultipartRelatedResponseObject); ok {
		if err := validResponse.VisitTestRefFixedMultipartRelatedResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefFixedNoContent operation middleware
func (sh *strictHandler) TestRefFixedNoContent(ctx iris.Context) {
	var request TestRefFixedNoContentRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefFixedNoContent(ctx, request.(TestRefFixedNoContentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefFixedNoContent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefFixedNoContentResponseObject); ok {
		if err := validResponse.VisitTestRefFixedNoContentResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefFixedOther operation middleware
func (sh *strictHandler) TestRefFixedOther(ctx iris.Context) {
	var request TestRefFixedOtherRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefFixedOther(ctx, request.(TestRefFixedOtherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefFixedOther")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefFixedOtherResponseObject); ok {
		if err := validResponse.VisitTestRefFixedOtherResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefFixedSpecialJSON operation middleware
func (sh *strictHandler) TestRefFixedSpecialJSON(ctx iris.Context) {
	var request TestRefFixedSpecialJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefFixedSpecialJSON(ctx, request.(TestRefFixedSpecialJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefFixedSpecialJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefFixedSpecialJSONResponseObject); ok {
		if err := validResponse.VisitTestRefFixedSpecialJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefFixedWildcard operation middleware
func (sh *strictHandler) TestRefFixedWildcard(ctx iris.Context) {
	var request TestRefFixedWildcardRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefFixedWildcard(ctx, request.(TestRefFixedWildcardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefFixedWildcard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefFixedWildcardResponseObject); ok {
		if err := validResponse.VisitTestRefFixedWildcardResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefHeaderFixedJSON operation middleware
func (sh *strictHandler) TestRefHeaderFixedJSON(ctx iris.Context) {
	var request TestRefHeaderFixedJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderFixedJSON(ctx, request.(TestRefHeaderFixedJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderFixedJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefHeaderFixedJSONResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderFixedJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefHeaderFixedMultipart operation middleware
func (sh *strictHandler) TestRefHeaderFixedMultipart(ctx iris.Context) {
	var request TestRefHeaderFixedMultipartRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderFixedMultipart(ctx, request.(TestRefHeaderFixedMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderFixedMultipart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefHeaderFixedMultipartResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderFixedMultipartResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefHeaderFixedMultipartRelated operation middleware
func (sh *strictHandler) TestRefHeaderFixedMultipartRelated(ctx iris.Context) {
	var request TestRefHeaderFixedMultipartRelatedRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderFixedMultipartRelated(ctx, request.(TestRefHeaderFixedMultipartRelatedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderFixedMultipartRelated")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefHeaderFixedMultipartRelatedResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderFixedMultipartRelatedResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefHeaderFixedOther operation middleware
func (sh *strictHandler) TestRefHeaderFixedOther(ctx iris.Context) {
	var request TestRefHeaderFixedOtherRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderFixedOther(ctx, request.(TestRefHeaderFixedOtherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderFixedOther")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefHeaderFixedOtherResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderFixedOtherResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefHeaderFixedSpecialJSON operation middleware
func (sh *strictHandler) TestRefHeaderFixedSpecialJSON(ctx iris.Context) {
	var request TestRefHeaderFixedSpecialJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderFixedSpecialJSON(ctx, request.(TestRefHeaderFixedSpecialJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderFixedSpecialJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefHeaderFixedSpecialJSONResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderFixedSpecialJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefHeaderFixedWildcard operation middleware
func (sh *strictHandler) TestRefHeaderFixedWildcard(ctx iris.Context) {
	var request TestRefHeaderFixedWildcardRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderFixedWildcard(ctx, request.(TestRefHeaderFixedWildcardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderFixedWildcard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefHeaderFixedWildcardResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderFixedWildcardResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefHeaderJSON operation middleware
func (sh *strictHandler) TestRefHeaderJSON(ctx iris.Context) {
	var request TestRefHeaderJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderJSON(ctx, request.(TestRefHeaderJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefHeaderJSONResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefHeaderMultipart operation middleware
func (sh *strictHandler) TestRefHeaderMultipart(ctx iris.Context) {
	var request TestRefHeaderMultipartRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderMultipart(ctx, request.(TestRefHeaderMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderMultipart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefHeaderMultipartResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderMultipartResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefHeaderMultipartRelated operation middleware
func (sh *strictHandler) TestRefHeaderMultipartRelated(ctx iris.Context) {
	var request TestRefHeaderMultipartRelatedRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderMultipartRelated(ctx, request.(TestRefHeaderMultipartRelatedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderMultipartRelated")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefHeaderMultipartRelatedResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderMultipartRelatedResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefHeaderOther operation middleware
func (sh *strictHandler) TestRefHeaderOther(ctx iris.Context) {
	var request TestRefHeaderOtherRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderOther(ctx, request.(TestRefHeaderOtherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderOther")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefHeaderOtherResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderOtherResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefHeaderSpecialJSON operation middleware
func (sh *strictHandler) TestRefHeaderSpecialJSON(ctx iris.Context) {
	var request TestRefHeaderSpecialJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderSpecialJSON(ctx, request.(TestRefHeaderSpecialJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderSpecialJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefHeaderSpecialJSONResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderSpecialJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefHeaderWildcard operation middleware
func (sh *strictHandler) TestRefHeaderWildcard(ctx iris.Context) {
	var request TestRefHeaderWildcardRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderWildcard(ctx, request.(TestRefHeaderWildcardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderWildcard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefHeaderWildcardResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderWildcardResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefJSON operation middleware
func (sh *strictHandler) TestRefJSON(ctx iris.Context) {
	var request TestRefJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefJSON(ctx, request.(TestRefJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefJSONResponseObject); ok {
		if err := validResponse.VisitTestRefJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefMultipart operation middleware
func (sh *strictHandler) TestRefMultipart(ctx iris.Context) {
	var request TestRefMultipartRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefMultipart(ctx, request.(TestRefMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefMultipart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefMultipartResponseObject); ok {
		if err := validResponse.VisitTestRefMultipartResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefMultipartRelated operation middleware
func (sh *strictHandler) TestRefMultipartRelated(ctx iris.Context) {
	var request TestRefMultipartRelatedRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefMultipartRelated(ctx, request.(TestRefMultipartRelatedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefMultipartRelated")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefMultipartRelatedResponseObject); ok {
		if err := validResponse.VisitTestRefMultipartRelatedResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefNoContent operation middleware
func (sh *strictHandler) TestRefNoContent(ctx iris.Context) {
	var request TestRefNoContentRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefNoContent(ctx, request.(TestRefNoContentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefNoContent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefNoContentResponseObject); ok {
		if err := validResponse.VisitTestRefNoContentResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefOther operation middleware
func (sh *strictHandler) TestRefOther(ctx iris.Context) {
	var request TestRefOtherRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefOther(ctx, request.(TestRefOtherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefOther")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefOtherResponseObject); ok {
		if err := validResponse.VisitTestRefOtherResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefSpecialJSON operation middleware
func (sh *strictHandler) TestRefSpecialJSON(ctx iris.Context) {
	var request TestRefSpecialJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefSpecialJSON(ctx, request.(TestRefSpecialJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefSpecialJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefSpecialJSONResponseObject); ok {
		if err := validResponse.VisitTestRefSpecialJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestRefWildcard operation middleware
func (sh *strictHandler) TestRefWildcard(ctx iris.Context) {
	var request TestRefWildcardRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefWildcard(ctx, request.(TestRefWildcardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefWildcard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestRefWildcardResponseObject); ok {
		if err := validResponse.VisitTestRefWildcardResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestSpecialJSON operation middleware
func (sh *strictHandler) TestSpecialJSON(ctx iris.Context) {
	var request TestSpecialJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestSpecialJSON(ctx, request.(TestSpecialJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestSpecialJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestSpecialJSONResponseObject); ok {
		if err := validResponse.VisitTestSpecialJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// TestWildcard operation middleware
func (sh *strictHandler) TestWildcard(ctx iris.Context) {
	var request TestWildcardRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestWildcard(ctx, request.(TestWildcardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestWildcard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestWildcardResponseObject); ok {
		if err := validResponse.VisitTestWildcardResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}
