// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Person defines model for Person.
type Person struct {
	// Embedded struct due to allOf(#/components/schemas/PersonProperties)
	PersonProperties `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// PersonAllOfSingle defines model for PersonAllOfSingle.
type PersonAllOfSingle struct {
	// Embedded struct due to allOf(#/components/schemas/Person)
	Person `yaml:",inline"`
}

// PersonProperties These are fields that specify a person. They are all optional, and
// would be used by an `Edit` style API endpoint, where each is optional.
type PersonProperties struct {
	FirstName          *string `json:"FirstName,omitempty"`
	GovernmentIDNumber *int64  `json:"GovernmentIDNumber,omitempty"`
	LastName           *string `json:"LastName,omitempty"`
}

// PersonWithID defines model for PersonWithID.
type PersonWithID struct {
	// Embedded struct due to allOf(#/components/schemas/Person)
	Person `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ID int64 `json:"ID"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUzW7bOBB+lQF3j4KcYBd70C1Yt4GAIjWQpDnEATKWRhZTasiSoxiC4XcvSMk/adCm",
	"uZWnOZDfzPcz3KrKds4ysQRVbFWoWuowlQvywXKs0JjPjSrut+pvT40q1F+z46vZ9GQ23l9468iLpqB2",
	"2VZ5+tZrT7Uq7tVH7YNcYUcqU59wKh92D5mqKVReO9Gxn7ppdQAdAMElyAw2WlrokGsU6wdoIhAg12Aw",
	"CDB2lMGqF7AJAg2U8yVz363I55DgNrY3NawIPEnvmWpYDYDweEnyCEEGQ3CxKHO4I+jIrwmkpan9kt2B",
	"0zgJspWWPFwn5rBpddWCZTOA8/ZZ1xRgzxsaTaYO+ZJVpmRwpAplV09Uidplk8QXUd5rzWtD71Vbva0e",
	"eKqsrwHDkXvjbQcI/3tCISCundUsOZQClWVBzWHJaExSYWQAtgGExakhyIB1rSfJPQXb+4rg9rac/5Lv",
	"SUSK7avpKRCgP7SVFgWCo0o3w4FTNJWGdC1Oubc9i5lY8sHrPkw+Mzx+qPWp0wfSGWxa8gSEVRtl22ON",
	"DNyLUY8BLrZ7ckG85nUkd2mfyXNHLOX8KmUvXmus71BUoTTLf/8eRdEstCYfHx524TXq7qci3mlpy/n7",
	"85JtfyA1grw55i57scvl/Hc298/JXpxfc2OTxlripqkbChIgbR8kxULCU5l6Jh9GRuf5WX4WVbeOGJ1W",
	"hfonP8vPYzZQ2qTgzBmsqLWmHi1fk7wO9hc0On1fATbIAihgKP5elgkiVAbBgkQBO/xKMfjUQYvODSOh",
	"6BlGsLJWhVqctIzOBGc57Beqwd6kEaKgxKlE54yuEsDsafrXx2zE6u3kTHlLQr5kdsp+l873AAAA//8T",
	"U6rAVQYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
