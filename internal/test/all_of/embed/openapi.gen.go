// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v0.0.0-00010101000000-000000000000 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Person defines model for Person.
type Person struct {
	// Embedded struct due to allOf(#/components/schemas/PersonProperties)
	PersonProperties `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// PersonAllOfSingle defines model for PersonAllOfSingle.
type PersonAllOfSingle struct {
	// Embedded struct due to allOf(#/components/schemas/Person)
	Person `yaml:",inline"`
}

// PersonProperties These are fields that specify a person. They are all optional, and
// would be used by an `Edit` style API endpoint, where each is optional.
type PersonProperties struct {
	FirstName          *string `json:"FirstName,omitempty"`
	GovernmentIDNumber *int64  `json:"GovernmentIDNumber,omitempty"`
	LastName           *string `json:"LastName,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5yTT2/UQAzFv4plOGbTViAOuVUUqpVQWamtOHQr1ZtxNoMST/A4XaJVvjua7L9CDwhu",
	"o8h+9nv+ZYtlaLsgLBax2GIsa25pei5YY5D0oqb5WmHxsMW3yhUW+Obs1HW2bznb1S80dKzmOeKYbVH5",
	"R++VHRYP+NlrtBtqGTP8Qvvn4/iYoeNYqu/Mp3l4V/sIPgJBN0lmsPFWQ0viyIIOUCUhIHHQUDQQajmD",
	"VW8QJglqYH61FOnbFWsOk9wm9I2DFYOy9SrsYDUAwdM12xNEGxqGy8U8h28MLeuawWrej19Kd/S024Qk",
	"WM0Kt5Nz2NS+rCFIM0Cn4dk7jnDwDZXnxsV8KZihDR1jgWH1nUvDDH/O1mFGTROqGbcrdjPlKmJh2vOY",
	"7fO/TNnfelk3/K+nwL9HC8plUAcUT8FUGlog+KhMxsDiuuDFcpgblEGMvMSlUNNMEe3sQaiAYPHyWiRA",
	"zvn9PZRj6LVkuL+fX/1/GC/gKravrHFkID3uZDUZxI5LXw1HwwkHHqayZOEATJZoWsqRkj7uCRF4+uT8",
	"S0aOiWSwqVkZmMo6ZXrQ2tnrflv1hH6xPTiPpl7WOGZ4HZ5ZpWWx+dXNRG0qq4K2ZFigF/vw/pSYF+M1",
	"a2o8/kWvVcc/Ex7TJy9VmIq9JZ7wjqNFmBiDiaM4XQwzfGaNu2Av8vP8PE0LHQt1Hgt8l5/nF8kkWZ38",
	"jeOvAAAA//+5KSqZSAQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
