// Package issue1530 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package issue1530

import (
	"encoding/json"
	"errors"

	"github.com/oapi-codegen/runtime"
)

// ConfigHttp defines model for ConfigHttp.
type ConfigHttp struct {
	ConfigType string  `json:"config_type"`
	Host       string  `json:"host"`
	Password   *string `json:"password,omitempty"`
	Port       int     `json:"port"`
	User       *string `json:"user,omitempty"`
}

// ConfigSaveReq defines model for ConfigSaveReq.
type ConfigSaveReq struct {
	union json.RawMessage
}

// ConfigSsh defines model for ConfigSsh.
type ConfigSsh struct {
	ConfigType string  `json:"config_type"`
	Host       *string `json:"host,omitempty"`
	Port       *int    `json:"port,omitempty"`
	PrivateKey *string `json:"private_key,omitempty"`
	User       *string `json:"user,omitempty"`
}

// PostConfigJSONRequestBody defines body for PostConfig for application/json ContentType.
type PostConfigJSONRequestBody = ConfigSaveReq

// AsConfigHttp returns the union data inside the ConfigSaveReq as a ConfigHttp
func (t ConfigSaveReq) AsConfigHttp() (ConfigHttp, error) {
	var body ConfigHttp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigHttp overwrites any union data inside the ConfigSaveReq as the provided ConfigHttp
func (t *ConfigSaveReq) FromConfigHttp(v ConfigHttp) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigHttp performs a merge with any union data inside the ConfigSaveReq, using the provided ConfigHttp
func (t *ConfigSaveReq) MergeConfigHttp(v ConfigHttp) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigSsh returns the union data inside the ConfigSaveReq as a ConfigSsh
func (t ConfigSaveReq) AsConfigSsh() (ConfigSsh, error) {
	var body ConfigSsh
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigSsh overwrites any union data inside the ConfigSaveReq as the provided ConfigSsh
func (t *ConfigSaveReq) FromConfigSsh(v ConfigSsh) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigSsh performs a merge with any union data inside the ConfigSaveReq, using the provided ConfigSsh
func (t *ConfigSaveReq) MergeConfigSsh(v ConfigSsh) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ConfigSaveReq) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"config_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ConfigSaveReq) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "another_server":
		return t.AsConfigHttp()
	case "apache_server":
		return t.AsConfigHttp()
	case "ssh_server":
		return t.AsConfigSsh()
	case "web_server":
		return t.AsConfigHttp()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ConfigSaveReq) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ConfigSaveReq) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
