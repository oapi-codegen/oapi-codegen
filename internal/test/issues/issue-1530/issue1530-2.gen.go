// Package param provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package param

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ObjXObjectType.
const (
	ObjXObjectTypeInt ObjXObjectType = "int"
	ObjXObjectTypeStr ObjXObjectType = "str"
)

// Defines values for ObjintObjectType.
const (
	ObjintObjectTypeInt ObjintObjectType = "int"
)

// Defines values for ObjstrObjectType.
const (
	Str ObjstrObjectType = "str"
)

// ObjX defines model for objX.
type ObjX struct {
	ObjectType *ObjXObjectType `json:"objectType,omitempty"`
	union      json.RawMessage
}

// ObjXObjectType defines model for ObjX.ObjectType.
type ObjXObjectType string

// Objint defines model for objint.
type Objint struct {
	ObjectType ObjintObjectType `json:"objectType"`
}

// ObjintObjectType defines model for Objint.ObjectType.
type ObjintObjectType string

// Objstr defines model for objstr.
type Objstr struct {
	ObjectType ObjstrObjectType `json:"objectType,omitempty"`
}

// ObjstrObjectType defines model for Objstr.ObjectType.
type ObjstrObjectType string

// AsObjstr returns the union data inside the ObjX as a Objstr
func (t ObjX) AsObjstr() (Objstr, error) {
	var body Objstr
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *ObjX) prepareObjstr(v Objstr) ([]byte, error) {
	discValue := "str"
	t.ObjectType = (*ObjXObjectType)(&discValue)
	v.ObjectType = "str"
	return json.Marshal(v)
}

// FromObjstr overwrites any union data inside the ObjX as the provided Objstr
func (t *ObjX) FromObjstr(v Objstr) error {
	b, err := t.prepareObjstr(v)
	t.union = b
	return err
}

// MergeObjstr performs a merge with any union data inside the ObjX, using the provided Objstr
func (t *ObjX) MergeObjstr(v Objstr) error {
	b, err := t.prepareObjstr(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsObjint returns the union data inside the ObjX as a Objint
func (t ObjX) AsObjint() (Objint, error) {
	var body Objint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *ObjX) prepareObjint(v Objint) ([]byte, error) {
	discValue := "int"
	t.ObjectType = (*ObjXObjectType)(&discValue)
	v.ObjectType = "int"
	return json.Marshal(v)
}

// FromObjint overwrites any union data inside the ObjX as the provided Objint
func (t *ObjX) FromObjint(v Objint) error {
	b, err := t.prepareObjint(v)
	t.union = b
	return err
}

// MergeObjint performs a merge with any union data inside the ObjX, using the provided Objint
func (t *ObjX) MergeObjint(v Objint) error {
	b, err := t.prepareObjint(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ObjX) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"objectType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ObjX) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "int":
		return t.AsObjint()
	case "str":
		return t.AsObjstr()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ObjX) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.ObjectType != nil {
		object["objectType"], err = json.Marshal(t.ObjectType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'objectType': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *ObjX) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["objectType"]; found {
		err = json.Unmarshal(raw, &t.ObjectType)
		if err != nil {
			return fmt.Errorf("error reading 'objectType': %w", err)
		}
	}

	return err
}
