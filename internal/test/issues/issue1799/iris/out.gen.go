// Package iris provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package iris

import (
	"context"
	"net/http"

	"github.com/kataras/iris/v12"
	strictiris "github.com/oapi-codegen/runtime/strictmiddleware/iris"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /object)
	GetObject(ctx iris.Context)
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc iris.Handler

// GetObject converts iris context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.GetObject(ctx)
}

// IrisServerOption is the option for iris server
type IrisServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *iris.Application, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, IrisServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *iris.Application, si ServerInterface, options IrisServerOptions) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.Get(options.BaseURL+"/object", wrapper.GetObject)

	router.Build()
}

type GetObjectRequestObject struct {
}

type GetObjectResponseObject interface {
	VisitGetObjectResponse(ctx iris.Context) error
}

type GetObject200ApplicationLdPlusJSONProfilehttpswwwW3OrgnsactivitystreamsResponse string

func (response GetObject200ApplicationLdPlusJSONProfilehttpswwwW3OrgnsactivitystreamsResponse) VisitGetObjectResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"")
	ctx.StatusCode(200)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /object)
	GetObject(ctx context.Context, request GetObjectRequestObject) (GetObjectResponseObject, error)
}

type StrictHandlerFunc = strictiris.StrictIrisHandlerFunc
type StrictMiddlewareFunc = strictiris.StrictIrisMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetObject operation middleware
func (sh *strictHandler) GetObject(ctx iris.Context) {
	var request GetObjectRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetObject(ctx, request.(GetObjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetObject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(GetObjectResponseObject); ok {
		if err := validResponse.VisitGetObjectResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}
