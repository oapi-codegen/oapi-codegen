// Package iris provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package iris

import (
	"context"
	"net/http"
	"strings"

	"github.com/kataras/iris/v12"
	strictiris "github.com/oapi-codegen/runtime/strictmiddleware/iris"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /get-multibody)
	GetGetMultibody(ctx iris.Context)

	// (GET /object)
	GetObject(ctx iris.Context)

	// (POST /post-multibody)
	PostPostMultibody(ctx iris.Context)

	// (POST /post-object)
	PostPostObject(ctx iris.Context)
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc iris.Handler

// GetGetMultibody converts iris context to params.
func (w *ServerInterfaceWrapper) GetGetMultibody(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.GetGetMultibody(ctx)
}

// GetObject converts iris context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.GetObject(ctx)
}

// PostPostMultibody converts iris context to params.
func (w *ServerInterfaceWrapper) PostPostMultibody(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.PostPostMultibody(ctx)
}

// PostPostObject converts iris context to params.
func (w *ServerInterfaceWrapper) PostPostObject(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.PostPostObject(ctx)
}

// IrisServerOption is the option for iris server
type IrisServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *iris.Application, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, IrisServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *iris.Application, si ServerInterface, options IrisServerOptions) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.Get(options.BaseURL+"/get-multibody", wrapper.GetGetMultibody)
	router.Get(options.BaseURL+"/object", wrapper.GetObject)
	router.Post(options.BaseURL+"/post-multibody", wrapper.PostPostMultibody)
	router.Post(options.BaseURL+"/post-object", wrapper.PostPostObject)

	router.Build()
}

type GetGetMultibodyRequestObject struct {
}

type GetGetMultibodyResponseObject interface {
	VisitGetGetMultibodyResponse(ctx iris.Context) error
}

type GetGetMultibody200ApplicationLdPlusJSONProfilehttpswwwW3OrgnsactivitystreamsResponse string

func (response GetGetMultibody200ApplicationLdPlusJSONProfilehttpswwwW3OrgnsactivitystreamsResponse) VisitGetGetMultibodyResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"")
	ctx.StatusCode(200)

	return ctx.JSON(&response)
}

type GetGetMultibody200ApplicationLdPlusJSONProfilehttpswwwW3Orgnsactivitystreams2Response string

func (response GetGetMultibody200ApplicationLdPlusJSONProfilehttpswwwW3Orgnsactivitystreams2Response) VisitGetGetMultibodyResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/ld+json; profile=\"https://www.w3.org/ns/activitystreams2\"")
	ctx.StatusCode(200)

	return ctx.JSON(&response)
}

type GetObjectRequestObject struct {
}

type GetObjectResponseObject interface {
	VisitGetObjectResponse(ctx iris.Context) error
}

type GetObject200ApplicationLdPlusJSONProfilehttpswwwW3OrgnsactivitystreamsResponse string

func (response GetObject200ApplicationLdPlusJSONProfilehttpswwwW3OrgnsactivitystreamsResponse) VisitGetObjectResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"")
	ctx.StatusCode(200)

	return ctx.JSON(&response)
}

type PostPostMultibodyRequestObject struct {
	ApplicationLdPlusJSONProfilehttpswwwW3OrgnsactivitystreamsBody  *PostPostMultibodyApplicationLdPlusJSONProfilehttpswwwW3OrgnsactivitystreamsRequestBody
	ApplicationLdPlusJSONProfilehttpswwwW3Orgnsactivitystreams2Body *PostPostMultibodyApplicationLdPlusJSONProfilehttpswwwW3Orgnsactivitystreams2RequestBody
}

type PostPostMultibodyResponseObject interface {
	VisitPostPostMultibodyResponse(ctx iris.Context) error
}

type PostPostObjectRequestObject struct {
	Body *PostPostObjectApplicationLdPlusJSONProfilehttpswwwW3OrgnsactivitystreamsRequestBody
}

type PostPostObjectResponseObject interface {
	VisitPostPostObjectResponse(ctx iris.Context) error
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /get-multibody)
	GetGetMultibody(ctx context.Context, request GetGetMultibodyRequestObject) (GetGetMultibodyResponseObject, error)

	// (GET /object)
	GetObject(ctx context.Context, request GetObjectRequestObject) (GetObjectResponseObject, error)

	// (POST /post-multibody)
	PostPostMultibody(ctx context.Context, request PostPostMultibodyRequestObject) (PostPostMultibodyResponseObject, error)

	// (POST /post-object)
	PostPostObject(ctx context.Context, request PostPostObjectRequestObject) (PostPostObjectResponseObject, error)
}

type StrictHandlerFunc = strictiris.StrictIrisHandlerFunc
type StrictMiddlewareFunc = strictiris.StrictIrisMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetGetMultibody operation middleware
func (sh *strictHandler) GetGetMultibody(ctx iris.Context) {
	var request GetGetMultibodyRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGetMultibody(ctx, request.(GetGetMultibodyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGetMultibody")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(GetGetMultibodyResponseObject); ok {
		if err := validResponse.VisitGetGetMultibodyResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// GetObject operation middleware
func (sh *strictHandler) GetObject(ctx iris.Context) {
	var request GetObjectRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetObject(ctx, request.(GetObjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetObject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(GetObjectResponseObject); ok {
		if err := validResponse.VisitGetObjectResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// PostPostMultibody operation middleware
func (sh *strictHandler) PostPostMultibody(ctx iris.Context) {
	var request PostPostMultibodyRequestObject

	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"") {

		var body PostPostMultibodyApplicationLdPlusJSONProfilehttpswwwW3OrgnsactivitystreamsRequestBody
		if err := ctx.ReadJSON(&body); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
		request.ApplicationLdPlusJSONProfilehttpswwwW3OrgnsactivitystreamsBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/ld+json; profile=\"https://www.w3.org/ns/activitystreams2\"") {

		var body PostPostMultibodyApplicationLdPlusJSONProfilehttpswwwW3Orgnsactivitystreams2RequestBody
		if err := ctx.ReadJSON(&body); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
		request.ApplicationLdPlusJSONProfilehttpswwwW3Orgnsactivitystreams2Body = &body
	}

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPostMultibody(ctx, request.(PostPostMultibodyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPostMultibody")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(PostPostMultibodyResponseObject); ok {
		if err := validResponse.VisitPostPostMultibodyResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}

// PostPostObject operation middleware
func (sh *strictHandler) PostPostObject(ctx iris.Context) {
	var request PostPostObjectRequestObject

	var body PostPostObjectApplicationLdPlusJSONProfilehttpswwwW3OrgnsactivitystreamsRequestBody
	if err := ctx.ReadJSON(&body); err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	}
	request.Body = &body

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPostObject(ctx, request.(PostPostObjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPostObject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(PostPostObjectResponseObject); ok {
		if err := validResponse.VisitPostPostObjectResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}
