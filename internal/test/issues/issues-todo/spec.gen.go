// Package issuestodo provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package issuestodo

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for InsightsAPIGetContainerImagePackagesParamsExceptionFilter.
const (
	Active   InsightsAPIGetContainerImagePackagesParamsExceptionFilter = "active"
	All      InsightsAPIGetContainerImagePackagesParamsExceptionFilter = "all"
	Excepted InsightsAPIGetContainerImagePackagesParamsExceptionFilter = "excepted"
)

// InsightsAPIGetContainerImagePackagesParams defines parameters for InsightsAPIGetContainerImagePackages.
type InsightsAPIGetContainerImagePackagesParams struct {
	// ExceptionFilter - all: return all resources
	// - active: return only not excepted resources
	// - excepted: return only excepted resources
	ExceptionFilter *InsightsAPIGetContainerImagePackagesParamsExceptionFilter `form:"exceptionFilter,omitempty" json:"exceptionFilter,omitempty"`
}

// InsightsAPIGetContainerImagePackagesParamsExceptionFilter defines parameters for InsightsAPIGetContainerImagePackages.
type InsightsAPIGetContainerImagePackagesParamsExceptionFilter string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/2SRQW/bMAyF/4rwzkq9YjfdhgErcuu960GwGYeYLKkUFdQI9N8H2Um3oidb5CMfP/IK",
	"jqcEd4WyBoIDLC4khVPcH++HdCEJfj34nAPTBIeiUketQtM9iWaRMkWfGQ7fH749PMIiez2X3ny4PA6F",
	"xiqs68Cx8HzWMvDiZyrDVf18nNqQ/finB3rBTNo/KZN45RSP3fZ4K/zxfHwi/Zmieo4kx97m+V7cXcUv",
	"pCQF7qUDwm2TwCL6pTNuhrAQeqssHUmlkkUZz7T4bRtrph2U44zW7BUTlVE4676Zg/EhOCOkVWL/N0Il",
	"VRmp/I4H40flC33kUwyriUkNvY+UlabP6nv0s/6rFnaneask6z+cXcgp/uKgJPgfZKKTr0Hh4EOABcW6",
	"wL3cXvuYPXzzwqv9wv7aF1VyimW7TbModVm8rHB4IjXeBC5q0slsBzUfd2yttb8BAAD//wFZsPhhAgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
