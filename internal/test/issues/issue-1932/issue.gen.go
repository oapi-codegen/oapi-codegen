// Package issue1932 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package issue1932

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// Param defines model for param.
type Param = string

// SimpleParam defines model for SimpleParam.
type SimpleParam struct {
	Message string `json:"message"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /param/{param})
	GetParam(c *fiber.Ctx, param Param) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetParam operation middleware
func (siw *ServerInterfaceWrapper) GetParam(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "param" -------------
	var param Param

	err = runtime.BindStyledParameterWithOptions("simple", "param", strings.Clone(c.Params("param")), &param, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter param: %w", err).Error())
	}

	return siw.Handler.GetParam(c, param)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/param/:param", wrapper.GetParam)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/2xRwa7aMBD8lWjaYxTntTffeqreoRIS3BAHN1nAKLG39oKEIv97ZQdI9MTJ6/WsZ2dm",
	"QudH9o6cROgJbIIZSSgst1xYBw02ckYNZ0Yqt/xWI9C/qw3UQ0u4Uo3YnWk0eUjunIFRgnUnpBpR7kPp",
	"2JEHQkp5OrJ3kQrdtvQ3T9LOOyEnuTTMg+2MWO/UJXqXewsRB88UxM6/jBSjOdGbDdJ62/0LeKifQP/3",
	"Qp0gZWRPsQuWMyU0flXz0tVz4WqNte7oM99gO3KxUD9c+vO5y8rFSlG+oyjVlsKNAmrcKMT5+4+mbdoM",
	"9EzOsIXGz6ZtPlAX14suVRxXUzlS7pyomJPFF2s+e2j8Jtk8olmHuZ/wPdARGt/UErlaIHOJdPgSyo+2",
	"zce74RdOrZNLqXgSi8qZ+RoGaJxFWCv1kCgUpemJeDTcGIt0SP8DAAD//7eYAa2NAgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
