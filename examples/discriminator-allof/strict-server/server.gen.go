//go:build go1.22

// Package discriminator provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package discriminator

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all animals
	// (GET /animals)
	GetAllAnimals(w http.ResponseWriter, r *http.Request)
	// Register animal
	// (POST /animals)
	RegisterAnimal(w http.ResponseWriter, r *http.Request)
	// Get an animal by ID
	// (GET /animals/{animalId})
	GetAnimal(w http.ResponseWriter, r *http.Request, animalId string)
	// Get pets
	// (GET /pets)
	GetPets(w http.ResponseWriter, r *http.Request)
	// Create a pet
	// (POST /pets)
	CreatePet(w http.ResponseWriter, r *http.Request)
	// Get a pet by ID
	// (GET /pets/{petId})
	GetPet(w http.ResponseWriter, r *http.Request, petId string)
	// Get all activities
	// (GET /pets/{petId}/activities)
	GetActivities(w http.ResponseWriter, r *http.Request, petId string)
	// Log activity
	// (POST /pets/{petId}/activities)
	LogActivity(w http.ResponseWriter, r *http.Request, petId string)
	// Get activity by ID
	// (GET /pets/{petId}/activities/{activityId})
	GetActivity(w http.ResponseWriter, r *http.Request, petId string, activityId string)
	// Get all health records
	// (GET /pets/{petId}/health-records)
	GetHealthRecords(w http.ResponseWriter, r *http.Request, petId string)
	// Add health record
	// (POST /pets/{petId}/health-records)
	AddHealthRecord(w http.ResponseWriter, r *http.Request, petId string)
	// Get health record by ID
	// (GET /pets/{petId}/health-records/{recordId})
	GetHealthRecord(w http.ResponseWriter, r *http.Request, petId string, recordId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllAnimals operation middleware
func (siw *ServerInterfaceWrapper) GetAllAnimals(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllAnimals(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterAnimal operation middleware
func (siw *ServerInterfaceWrapper) RegisterAnimal(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterAnimal(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAnimal operation middleware
func (siw *ServerInterfaceWrapper) GetAnimal(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "animalId" -------------
	var animalId string

	err = runtime.BindStyledParameterWithOptions("simple", "animalId", r.PathValue("animalId"), &animalId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "animalId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnimal(w, r, animalId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPets operation middleware
func (siw *ServerInterfaceWrapper) GetPets(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPets(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePet operation middleware
func (siw *ServerInterfaceWrapper) CreatePet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPet operation middleware
func (siw *ServerInterfaceWrapper) GetPet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId string

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPet(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetActivities operation middleware
func (siw *ServerInterfaceWrapper) GetActivities(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId string

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetActivities(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LogActivity operation middleware
func (siw *ServerInterfaceWrapper) LogActivity(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId string

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogActivity(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetActivity operation middleware
func (siw *ServerInterfaceWrapper) GetActivity(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId string

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	// ------------- Path parameter "activityId" -------------
	var activityId string

	err = runtime.BindStyledParameterWithOptions("simple", "activityId", r.PathValue("activityId"), &activityId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "activityId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetActivity(w, r, petId, activityId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealthRecords operation middleware
func (siw *ServerInterfaceWrapper) GetHealthRecords(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId string

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealthRecords(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddHealthRecord operation middleware
func (siw *ServerInterfaceWrapper) AddHealthRecord(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId string

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddHealthRecord(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealthRecord operation middleware
func (siw *ServerInterfaceWrapper) GetHealthRecord(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId string

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	// ------------- Path parameter "recordId" -------------
	var recordId string

	err = runtime.BindStyledParameterWithOptions("simple", "recordId", r.PathValue("recordId"), &recordId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recordId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealthRecord(w, r, petId, recordId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/animals", wrapper.GetAllAnimals)
	m.HandleFunc("POST "+options.BaseURL+"/animals", wrapper.RegisterAnimal)
	m.HandleFunc("GET "+options.BaseURL+"/animals/{animalId}", wrapper.GetAnimal)
	m.HandleFunc("GET "+options.BaseURL+"/pets", wrapper.GetPets)
	m.HandleFunc("POST "+options.BaseURL+"/pets", wrapper.CreatePet)
	m.HandleFunc("GET "+options.BaseURL+"/pets/{petId}", wrapper.GetPet)
	m.HandleFunc("GET "+options.BaseURL+"/pets/{petId}/activities", wrapper.GetActivities)
	m.HandleFunc("POST "+options.BaseURL+"/pets/{petId}/activities", wrapper.LogActivity)
	m.HandleFunc("GET "+options.BaseURL+"/pets/{petId}/activities/{activityId}", wrapper.GetActivity)
	m.HandleFunc("GET "+options.BaseURL+"/pets/{petId}/health-records", wrapper.GetHealthRecords)
	m.HandleFunc("POST "+options.BaseURL+"/pets/{petId}/health-records", wrapper.AddHealthRecord)
	m.HandleFunc("GET "+options.BaseURL+"/pets/{petId}/health-records/{recordId}", wrapper.GetHealthRecord)

	return m
}

type GetAllAnimalsRequestObject struct {
}

type GetAllAnimalsResponseObject interface {
	VisitGetAllAnimalsResponse(w http.ResponseWriter) error
}

type GetAllAnimals200JSONResponse []Animal

func (response GetAllAnimals200JSONResponse) VisitGetAllAnimalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// Type definition for []AnimalInterface to enable direct return of mixed discriminator types
type GetAllAnimals200AnimalInterfaceResponse []AnimalInterface

func (response GetAllAnimals200AnimalInterfaceResponse) VisitGetAllAnimalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

type RegisterAnimalRequestObject struct {
	Body *RegisterAnimalJSONRequestBody
}

type RegisterAnimalResponseObject interface {
	VisitRegisterAnimalResponse(w http.ResponseWriter) error
}

type RegisterAnimal201JSONResponse Animal

func (response RegisterAnimal201JSONResponse) VisitRegisterAnimalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

// VisitRegisterAnimalResponse for DomesticAnimal allows direct return of concrete discriminator type
func (response DomesticAnimal) VisitRegisterAnimalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	return json.NewEncoder(w).Encode(response)
}

// VisitRegisterAnimalResponse for WildAnimal allows direct return of concrete discriminator type
func (response WildAnimal) VisitRegisterAnimalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	return json.NewEncoder(w).Encode(response)
}

type GetAnimalRequestObject struct {
	AnimalId string `json:"animalId"`
}

type GetAnimalResponseObject interface {
	VisitGetAnimalResponse(w http.ResponseWriter) error
}

type GetAnimal200JSONResponse Animal

func (response GetAnimal200JSONResponse) VisitGetAnimalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// VisitGetAnimalResponse for DomesticAnimal allows direct return of concrete discriminator type
func (response DomesticAnimal) VisitGetAnimalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

// VisitGetAnimalResponse for WildAnimal allows direct return of concrete discriminator type
func (response WildAnimal) VisitGetAnimalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

type GetPetsRequestObject struct {
}

type GetPetsResponseObject interface {
	VisitGetPetsResponse(w http.ResponseWriter) error
}

type GetPets200JSONResponse []Pet

func (response GetPets200JSONResponse) VisitGetPetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// Type definition for []PetInterface to enable direct return of mixed discriminator types
type GetPets200PetInterfaceResponse []PetInterface

func (response GetPets200PetInterfaceResponse) VisitGetPetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

type CreatePetRequestObject struct {
	Body *CreatePetJSONRequestBody
}

type CreatePetResponseObject interface {
	VisitCreatePetResponse(w http.ResponseWriter) error
}

type CreatePet200JSONResponse Pet

func (response CreatePet200JSONResponse) VisitCreatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// VisitCreatePetResponse for Cat allows direct return of concrete discriminator type
func (response Cat) VisitCreatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

// VisitCreatePetResponse for Dog allows direct return of concrete discriminator type
func (response Dog) VisitCreatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

type GetPetRequestObject struct {
	PetId string `json:"petId"`
}

type GetPetResponseObject interface {
	VisitGetPetResponse(w http.ResponseWriter) error
}

type GetPet200JSONResponse Pet

func (response GetPet200JSONResponse) VisitGetPetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// VisitGetPetResponse for Cat allows direct return of concrete discriminator type
func (response Cat) VisitGetPetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

// VisitGetPetResponse for Dog allows direct return of concrete discriminator type
func (response Dog) VisitGetPetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

type GetActivitiesRequestObject struct {
	PetId string `json:"petId"`
}

type GetActivitiesResponseObject interface {
	VisitGetActivitiesResponse(w http.ResponseWriter) error
}

type GetActivities200JSONResponse []PetActivity

func (response GetActivities200JSONResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// Type definition for []PetActivityInterface to enable direct return of mixed discriminator types
type GetActivities200PetActivityInterfaceResponse []PetActivityInterface

func (response GetActivities200PetActivityInterfaceResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

type LogActivityRequestObject struct {
	PetId string `json:"petId"`
	Body  *LogActivityJSONRequestBody
}

type LogActivityResponseObject interface {
	VisitLogActivityResponse(w http.ResponseWriter) error
}

type LogActivity201JSONResponse PetActivity

func (response LogActivity201JSONResponse) VisitLogActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

// VisitLogActivityResponse for FeedingActivity allows direct return of concrete discriminator type
func (response FeedingActivity) VisitLogActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	return json.NewEncoder(w).Encode(response)
}

// VisitLogActivityResponse for WalkingActivity allows direct return of concrete discriminator type
func (response WalkingActivity) VisitLogActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	return json.NewEncoder(w).Encode(response)
}

type GetActivityRequestObject struct {
	PetId      string `json:"petId"`
	ActivityId string `json:"activityId"`
}

type GetActivityResponseObject interface {
	VisitGetActivityResponse(w http.ResponseWriter) error
}

type GetActivity200JSONResponse PetActivity

func (response GetActivity200JSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// VisitGetActivityResponse for FeedingActivity allows direct return of concrete discriminator type
func (response FeedingActivity) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

// VisitGetActivityResponse for WalkingActivity allows direct return of concrete discriminator type
func (response WalkingActivity) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

type GetHealthRecordsRequestObject struct {
	PetId string `json:"petId"`
}

type GetHealthRecordsResponseObject interface {
	VisitGetHealthRecordsResponse(w http.ResponseWriter) error
}

type GetHealthRecords200JSONResponse []HealthRecord

func (response GetHealthRecords200JSONResponse) VisitGetHealthRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// Type definition for []HealthRecordInterface to enable direct return of mixed discriminator types
type GetHealthRecords200HealthRecordInterfaceResponse []HealthRecordInterface

func (response GetHealthRecords200HealthRecordInterfaceResponse) VisitGetHealthRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

type AddHealthRecordRequestObject struct {
	PetId string `json:"petId"`
	Body  *AddHealthRecordJSONRequestBody
}

type AddHealthRecordResponseObject interface {
	VisitAddHealthRecordResponse(w http.ResponseWriter) error
}

type AddHealthRecord201JSONResponse HealthRecord

func (response AddHealthRecord201JSONResponse) VisitAddHealthRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

// VisitAddHealthRecordResponse for CheckupRecord allows direct return of concrete discriminator type
func (response CheckupRecord) VisitAddHealthRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	return json.NewEncoder(w).Encode(response)
}

// VisitAddHealthRecordResponse for VaccinationRecord allows direct return of concrete discriminator type
func (response VaccinationRecord) VisitAddHealthRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	return json.NewEncoder(w).Encode(response)
}

type GetHealthRecordRequestObject struct {
	PetId    string `json:"petId"`
	RecordId string `json:"recordId"`
}

type GetHealthRecordResponseObject interface {
	VisitGetHealthRecordResponse(w http.ResponseWriter) error
}

type GetHealthRecord200JSONResponse HealthRecord

func (response GetHealthRecord200JSONResponse) VisitGetHealthRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// VisitGetHealthRecordResponse for CheckupRecord allows direct return of concrete discriminator type
func (response CheckupRecord) VisitGetHealthRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

// VisitGetHealthRecordResponse for VaccinationRecord allows direct return of concrete discriminator type
func (response VaccinationRecord) VisitGetHealthRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all animals
	// (GET /animals)
	GetAllAnimals(ctx context.Context, request GetAllAnimalsRequestObject) (GetAllAnimalsResponseObject, error)
	// Register animal
	// (POST /animals)
	RegisterAnimal(ctx context.Context, request RegisterAnimalRequestObject) (RegisterAnimalResponseObject, error)
	// Get an animal by ID
	// (GET /animals/{animalId})
	GetAnimal(ctx context.Context, request GetAnimalRequestObject) (GetAnimalResponseObject, error)
	// Get pets
	// (GET /pets)
	GetPets(ctx context.Context, request GetPetsRequestObject) (GetPetsResponseObject, error)
	// Create a pet
	// (POST /pets)
	CreatePet(ctx context.Context, request CreatePetRequestObject) (CreatePetResponseObject, error)
	// Get a pet by ID
	// (GET /pets/{petId})
	GetPet(ctx context.Context, request GetPetRequestObject) (GetPetResponseObject, error)
	// Get all activities
	// (GET /pets/{petId}/activities)
	GetActivities(ctx context.Context, request GetActivitiesRequestObject) (GetActivitiesResponseObject, error)
	// Log activity
	// (POST /pets/{petId}/activities)
	LogActivity(ctx context.Context, request LogActivityRequestObject) (LogActivityResponseObject, error)
	// Get activity by ID
	// (GET /pets/{petId}/activities/{activityId})
	GetActivity(ctx context.Context, request GetActivityRequestObject) (GetActivityResponseObject, error)
	// Get all health records
	// (GET /pets/{petId}/health-records)
	GetHealthRecords(ctx context.Context, request GetHealthRecordsRequestObject) (GetHealthRecordsResponseObject, error)
	// Add health record
	// (POST /pets/{petId}/health-records)
	AddHealthRecord(ctx context.Context, request AddHealthRecordRequestObject) (AddHealthRecordResponseObject, error)
	// Get health record by ID
	// (GET /pets/{petId}/health-records/{recordId})
	GetHealthRecord(ctx context.Context, request GetHealthRecordRequestObject) (GetHealthRecordResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllAnimals operation middleware
func (sh *strictHandler) GetAllAnimals(w http.ResponseWriter, r *http.Request) {
	var request GetAllAnimalsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllAnimals(ctx, request.(GetAllAnimalsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllAnimals")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllAnimalsResponseObject); ok {
		if err := validResponse.VisitGetAllAnimalsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterAnimal operation middleware
func (sh *strictHandler) RegisterAnimal(w http.ResponseWriter, r *http.Request) {
	var request RegisterAnimalRequestObject

	var body RegisterAnimalJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterAnimal(ctx, request.(RegisterAnimalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterAnimal")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterAnimalResponseObject); ok {
		if err := validResponse.VisitRegisterAnimalResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAnimal operation middleware
func (sh *strictHandler) GetAnimal(w http.ResponseWriter, r *http.Request, animalId string) {
	var request GetAnimalRequestObject

	request.AnimalId = animalId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAnimal(ctx, request.(GetAnimalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAnimal")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAnimalResponseObject); ok {
		if err := validResponse.VisitGetAnimalResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPets operation middleware
func (sh *strictHandler) GetPets(w http.ResponseWriter, r *http.Request) {
	var request GetPetsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPets(ctx, request.(GetPetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPetsResponseObject); ok {
		if err := validResponse.VisitGetPetsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePet operation middleware
func (sh *strictHandler) CreatePet(w http.ResponseWriter, r *http.Request) {
	var request CreatePetRequestObject

	var body CreatePetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePet(ctx, request.(CreatePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePetResponseObject); ok {
		if err := validResponse.VisitCreatePetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPet operation middleware
func (sh *strictHandler) GetPet(w http.ResponseWriter, r *http.Request, petId string) {
	var request GetPetRequestObject

	request.PetId = petId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPet(ctx, request.(GetPetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPetResponseObject); ok {
		if err := validResponse.VisitGetPetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivities operation middleware
func (sh *strictHandler) GetActivities(w http.ResponseWriter, r *http.Request, petId string) {
	var request GetActivitiesRequestObject

	request.PetId = petId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivities(ctx, request.(GetActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivities")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetActivitiesResponseObject); ok {
		if err := validResponse.VisitGetActivitiesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LogActivity operation middleware
func (sh *strictHandler) LogActivity(w http.ResponseWriter, r *http.Request, petId string) {
	var request LogActivityRequestObject

	request.PetId = petId

	var body LogActivityJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LogActivity(ctx, request.(LogActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LogActivity")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LogActivityResponseObject); ok {
		if err := validResponse.VisitLogActivityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivity operation middleware
func (sh *strictHandler) GetActivity(w http.ResponseWriter, r *http.Request, petId string, activityId string) {
	var request GetActivityRequestObject

	request.PetId = petId
	request.ActivityId = activityId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivity(ctx, request.(GetActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivity")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetActivityResponseObject); ok {
		if err := validResponse.VisitGetActivityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealthRecords operation middleware
func (sh *strictHandler) GetHealthRecords(w http.ResponseWriter, r *http.Request, petId string) {
	var request GetHealthRecordsRequestObject

	request.PetId = petId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthRecords(ctx, request.(GetHealthRecordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthRecords")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthRecordsResponseObject); ok {
		if err := validResponse.VisitGetHealthRecordsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddHealthRecord operation middleware
func (sh *strictHandler) AddHealthRecord(w http.ResponseWriter, r *http.Request, petId string) {
	var request AddHealthRecordRequestObject

	request.PetId = petId

	var body AddHealthRecordJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddHealthRecord(ctx, request.(AddHealthRecordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddHealthRecord")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddHealthRecordResponseObject); ok {
		if err := validResponse.VisitAddHealthRecordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealthRecord operation middleware
func (sh *strictHandler) GetHealthRecord(w http.ResponseWriter, r *http.Request, petId string, recordId string) {
	var request GetHealthRecordRequestObject

	request.PetId = petId
	request.RecordId = recordId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthRecord(ctx, request.(GetHealthRecordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthRecord")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthRecordResponseObject); ok {
		if err := validResponse.VisitGetHealthRecordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
